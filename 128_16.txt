--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         35651584 B, 64 B, 17-way associative
Command:          ./matrixmul-1-128-16
Data file:        cachegrind.out.1251011
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                  I1mr           ILmr           Dr                 D1mr            DLmr           Dw               D1mw            DLmw           
--------------------------------------------------------------------------------
20,406,293 (100.0%) 1,528 (100.0%) 1,516 (100.0%) 4,658,647 (100.0%) 10,950 (100.0%) 1,370 (100.0%) 473,585 (100.0%) 10,970 (100.0%) 3,669 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                  I1mr        ILmr        Dr                 D1mr           DLmr         Dw               D1mw           DLmw            file:function
--------------------------------------------------------------------------------
18,424,412 (90.29%)  4 ( 0.26%)  4 ( 0.26%) 4,194,383 (90.03%) 9,217 (84.17%)   0          262,160 (55.36%) 8,192 (74.68%) 1,023 (27.88%)  /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c:matrix_multiply
   524,320 ( 2.57%)  0           0            131,080 ( 2.81%)     0            0                0              0              0           /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c:min.constprop.0
   522,176 ( 2.56%)  2 ( 0.13%)  2 ( 0.13%)   131,072 ( 2.81%)     4 ( 0.04%)   2 ( 0.15%)  49,152 (10.38%)     0              0           ./stdlib/./stdlib/random_r.c:random_r
   344,064 ( 1.69%)  3 ( 0.20%)  3 ( 0.20%)   131,072 ( 2.81%)     2 ( 0.02%)   1 ( 0.07%)  32,768 ( 6.92%)     0              0           ./stdlib/./stdlib/random.c:random
   246,410 ( 1.21%)  1 ( 0.07%)  1 ( 0.07%)         4 ( 0.00%)     0            0           32,771 ( 6.92%) 1,024 ( 9.33%) 1,023 (27.88%)  /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c:matrix_init_random
    81,920 ( 0.40%)  1 ( 0.07%)  1 ( 0.07%)    16,384 ( 0.35%)     0            0           16,384 ( 3.46%)     1 ( 0.01%)     0           ./stdlib/./stdlib/rand.c:rand
    65,553 ( 0.32%)  3 ( 0.20%)  3 ( 0.20%)         2 ( 0.00%)     1 ( 0.01%)   0           65,536 (13.84%) 1,024 ( 9.33%) 1,024 (27.91%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
    33,008 ( 0.16%) 32 ( 2.09%) 31 ( 2.04%)    16,470 ( 0.35%)    10 ( 0.09%)   0               20 ( 0.00%)     1 ( 0.01%)     1 ( 0.03%)  ???:???
    26,684 ( 0.13%)  5 ( 0.33%)  5 ( 0.33%)     4,851 ( 0.10%)    65 ( 0.59%)  65 ( 4.74%)       6 ( 0.00%)     1 ( 0.01%)     1 ( 0.03%)  ./elf/./elf/dl-tunables.c:__GI___tunables_init
    24,728 ( 0.12%) 18 ( 1.18%) 18 ( 1.19%)     8,306 ( 0.18%)   194 ( 1.77%) 161 (11.75%)   3,493 ( 0.74%)     8 ( 0.07%)     3 ( 0.08%)  ./elf/./elf/dl-lookup.c:do_lookup_x
    21,525 ( 0.11%) 11 ( 0.72%) 11 ( 0.73%)     4,560 ( 0.10%)   100 ( 0.91%)  88 ( 6.42%)   2,401 ( 0.51%)     8 ( 0.07%)     1 ( 0.03%)  ./elf/./elf/dl-lookup.c:_dl_lookup_symbol_x

--------------------------------------------------------------------------------
-- Auto-annotated source: /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr                 D1mr           DLmr       Dw               D1mw           DLmw           

-- line 28 ----------------------------------------
         .          .          .                  .              .          .                .              .              .            * Use this constant when you implement loop blocking.
         .          .          .                  .              .          .                .              .              .            */
         .          .          .                  .              .          .                .              .              .           #if (BLOCK + 0)==0
         .          .          .                  .              .          .                .              .              .           #  undef BLOCK
         .          .          .                  .              .          .                .              .              .           #  define BLOCK 0
         .          .          .                  .              .          .                .              .              .           #endif
         .          .          .                  .              .          .                .              .              .           
         .          .          .                  .              .          .                .              .              .           static inline int min(int a, int b) {
   393,240 ( 1.93%) 0          0                  0              0          0                0              0              0             return (a < b) ? a : b;
   131,080 ( 0.64%) 0          0            131,080 ( 2.81%)     0          0                0              0              0           }
         .          .          .                  .              .          .                .              .              .           
         .          .          .                  .              .          .                .              .              .           static void
         .          .          .                  .              .          .                .              .              .           matrix_clear(float matrix[N][N])
         .          .          .                  .              .          .                .              .              .           {
         .          .          .                  .              .          .                .              .              .             for (size_t i = 0; i < N; ++i)
         .          .          .                  .              .          .                .              .              .               for (size_t j = 0; j < N; ++j)
         3 ( 0.00%) 0          0                  0              0          0                0              0              0                 matrix[i][j] = 0;
         .          .          .                  .              .          .                .              .              .           }
         .          .          .                  .              .          .                .              .              .           
         .          .          .                  .              .          .                .              .              .           static void
         .          .          .                  .              .          .                .              .              .           matrix_init_identity(float matrix[N][N])
         2 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         0              0          0                1 ( 0.00%)     0              0           {
         1 ( 0.00%) 0          0                  0              0          0                1 ( 0.00%)     0              0             matrix_clear(matrix);
         .          .          .                  .              .          .                .              .              .           
       388 ( 0.00%) 0          0                  1 ( 0.00%)     1 ( 0.01%) 1 ( 0.07%)       0              0              0             for (size_t i = 0; i < N; ++i)
       128 ( 0.00%) 0          0                  0              0          0              128 ( 0.03%)    64 ( 0.58%)     0               matrix[i][i] = 1.;
         2 ( 0.00%) 0          0                  2 ( 0.00%)     0          0                0              0              0           }
         .          .          .                  .              .          .                .              .              .           
         .          .          .                  .              .          .                .              .              .           static void
         .          .          .                  .              .          .                .              .              .           matrix_init_random(float matrix[N][N])
         6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         0              0          0                3 ( 0.00%)     0              0           {
       384 ( 0.00%) 0          0                  0              0          0                0              0              0             for (size_t i = 0; i < N; ++i)
    49,408 ( 0.24%) 0          0                  0              0          0                0              0              0               for (size_t j = 0; j < N; ++j)
   196,608 ( 0.96%) 0          0                  0              0          0           32,768 ( 6.92%) 1,024 ( 9.33%) 1,023 (27.88%)        matrix[i][j] = rand() % 100;
         4 ( 0.00%) 0          0                  4 ( 0.00%)     0          0                0              0              0           }
         .          .          .                  .              .          .                .              .              .           
         .          .          .                  .              .          .                .              .              .           void
         .          .          .                  .              .          .                .              .              .           matrix_dump(float matrix[N][N])
         .          .          .                  .              .          .                .              .              .           {
         .          .          .                  .              .          .                .              .              .             for (size_t i = 0; i < N; ++i)
         .          .          .                  .              .          .                .              .              .               {
         .          .          .                  .              .          .                .              .              .                 for (size_t j = 0; j < N; ++j)
         .          .          .                  .              .          .                .              .              .                   printf("%f ", matrix[i][j]);
-- line 70 ----------------------------------------
-- line 97 ----------------------------------------
         .          .          .                  .              .          .                .              .              .                   C[i][j] = row;
         .          .          .                  .              .          .                .              .              .                 }
         .          .          .                  .              .          .                .              .              .           }
         .          .          .                  .              .          .                .              .              .           
         .          .          .                  .              .          .                .              .              .           #else
         .          .          .                  .              .          .                .              .              .           // blocked multiply
         .          .          .                  .              .          .                .              .              .           static void
         .          .          .                  .              .          .                .              .              .           matrix_multiply(float C[N][N], const float A[N][N], const float B[N][N])
        11 ( 0.00%) 2 ( 0.13%) 2 ( 0.13%)         0              0          0                8 ( 0.00%)     0              0           {
        25 ( 0.00%) 0          0                  0              0          0                0              0              0             for (size_t jj = 0; jj < N; jj += BLOCK) {
       192 ( 0.00%) 0          0                  0              0          0                0              0              0               for (size_t kk = 0; kk < N; kk += BLOCK) {
    32,832 ( 0.16%) 0          0                  0              0          0                0              0              0                 for (size_t i = 0; i < N; i++) {
   549,040 ( 2.69%) 1 ( 0.07%) 1 ( 0.07%)        72 ( 0.00%)     0          0                8 ( 0.00%)     0              0                   for (size_t j = jj; j < min(jj+BLOCK, N); j++) {
   131,072 ( 0.64%) 0          0                  0              0          0                0              0              0                     float row = 0.0;
 7,078,016 (34.69%) 1 ( 0.07%) 1 ( 0.07%)         0              0          0          131,072 (27.68%)     0              0                     for (size_t k = kk; k < min(kk+BLOCK, N); k++) {
10,502,144 (51.47%) 0          0          4,194,304 (90.03%) 9,216 (84.16%) 0                0              0              0                       row += A[i][k] * B[k][j];
         .          .          .                  .              .          .                .              .              .                     }
   131,072 ( 0.64%) 0          0                  0              0          0          131,072 (27.68%) 8,192 (74.68%) 1,023 (27.88%)            C[i][j] = row;
         .          .          .                  .              .          .                .              .              .                   }
         .          .          .                  .              .          .                .              .              .                 }
         .          .          .                  .              .          .                .              .              .               }
         .          .          .                  .              .          .                .              .              .             }
         8 ( 0.00%) 0          0                  7 ( 0.00%)     1 ( 0.01%) 0                0              0              0           }
         .          .          .                  .              .          .                .              .              .           
         .          .          .                  .              .          .                .              .              .           #endif
         .          .          .                  .              .          .                .              .              .           
         .          .          .                  .              .          .                .              .              .           int
         .          .          .                  .              .          .                .              .              .           main(int argc, char **argv)
        11 ( 0.00%) 2 ( 0.13%) 2 ( 0.13%)         1 ( 0.00%)     0          0                7 ( 0.00%)     0              0           {
         .          .          .                  .              .          .                .              .              .             /* We use this "magic" to allocate real two-dimensional arrays, that
         .          .          .                  .              .          .                .              .              .              * are aligned at 64-bytes (cache line size).
         .          .          .                  .              .          .                .              .              .              */
         2 ( 0.00%) 0          0                  0              0          0                1 ( 0.00%)     0              0             float (*A)[N] = (float (*)[N])_mm_malloc(N * N * sizeof(float), 64);
         2 ( 0.00%) 0          0                  0              0          0                1 ( 0.00%)     0              0             float (*B)[N] = (float (*)[N])_mm_malloc(N * N * sizeof(float), 64);
         2 ( 0.00%) 0          0                  0              0          0                1 ( 0.00%)     0              0             float (*C)[N] = (float (*)[N])_mm_malloc(N * N * sizeof(float), 64);
         .          .          .                  .              .          .                .              .              .           
         .          .          .                  .              .          .                .              .              .             struct timespec init_start_time, init_end_time;
         3 ( 0.00%) 0          0                  0              0          0                1 ( 0.00%)     0              0             get_time(&init_start_time);
         .          .          .                  .              .          .                .              .              .           
         2 ( 0.00%) 0          0                  0              0          0                1 ( 0.00%)     0              0             matrix_init_identity(A);
         2 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         0              0          0                1 ( 0.00%)     0              0             matrix_init_random(B);
         .          .          .                  .              .          .                .              .              .           
         3 ( 0.00%) 0          0                  0              0          0                1 ( 0.00%)     0              0             get_time(&init_end_time);
         .          .          .                  .              .          .                .              .              .           
         .          .          .                  .              .          .                .              .              .             /* Perform the matrix multiplication */
         .          .          .                  .              .          .                .              .              .             struct timespec compute_start_time, compute_end_time;
         4 ( 0.00%) 0          0                  0              0          0                2 ( 0.00%)     0              0             get_time(&compute_start_time);
         .          .          .                  .              .          .                .              .              .           
         .          .          .                  .              .          .                .              .              .             for (int Z = 0; Z < N_REPEAT; ++Z)
         4 ( 0.00%) 0          0                  0              0          0                1 ( 0.00%)     0              0               matrix_multiply(C, A, B);
         .          .          .                  .              .          .                .              .              .           
         3 ( 0.00%) 0          0                  0              0          0                1 ( 0.00%)     0              0             get_time(&compute_end_time);
         .          .          .                  .              .          .                .              .              .           
         .          .          .                  .              .          .                .              .              .           
         .          .          .                  .              .          .                .              .              .           #ifdef ENABLE_TIMING
         .          .          .                  .              .          .                .              .              .             /* Output result in CSV for easy processing */
         .          .          .                  .              .          .                .              .              .             /* N,init time,n_repeat,runtime */
         7 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         1 ( 0.00%)     0          0                3 ( 0.00%)     0              0             printf("%d,%f,%d,%f\n",
         .          .          .                  .              .          .                .              .              .                    N,
         .          .          .                  .              .          .                .              .              .                    get_elapsed_ms(&init_end_time, &init_start_time),
         .          .          .                  .              .          .                .              .              .                    N_REPEAT,
         .          .          .                  .              .          .                .              .              .                    get_elapsed_ms(&compute_end_time, &compute_start_time));
         .          .          .                  .              .          .                .              .              .           #endif /* ENABLE_TIMING */
         .          .          .                  .              .          .                .              .              .           
         .          .          .                  .              .          .                .              .              .           #if 0
         .          .          .                  .              .          .                .              .              .             /* For debugging */
         .          .          .                  .              .          .                .              .              .             if (!matrix_equal(C, B))
         .          .          .                  .              .          .                .              .              .               fprintf(stderr, "Matrices are not equal!!\n");
         .          .          .                  .              .          .                .              .              .           #endif
         .          .          .                  .              .          .                .              .              .           
         2 ( 0.00%) 0          0                  0              0          0                1 ( 0.00%)     0              0             _mm_free(A);
         2 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)         0              0          0                1 ( 0.00%)     0              0             _mm_free(B);
         2 ( 0.00%) 0          0                  0              0          0                1 ( 0.00%)     0              0             _mm_free(C);
         .          .          .                  .              .          .                .              .              .           
         .          .          .                  .              .          .                .              .              .             return 0;
        12 ( 0.00%) 0          0                  9 ( 0.00%)     2 ( 0.02%) 0                0              0              0           }
--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/./elf/dl-lookup.c
  ./elf/./elf/dl-tunables.c
  ./stdlib/./stdlib/rand.c
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                  I1mr        ILmr        Dr                 D1mr           DLmr       Dw               D1mw           DLmw           
--------------------------------------------------------------------------------
19,195,729 (94.07%) 11 ( 0.72%) 11 ( 0.73%) 4,325,481 (92.85%) 9,220 (84.20%) 1 ( 0.07%) 295,085 (62.31%) 9,280 (84.59%) 2,046 (55.76%)  events annotated

