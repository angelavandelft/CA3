--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         35651584 B, 64 B, 17-way associative
Command:          ./matrixmul-1-1024-8
Data file:        cachegrind.out.1250373
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      I1mr           ILmr           Dr                     D1mr                   DLmr           Dw                   D1mw                 DLmw             
--------------------------------------------------------------------------------
10,971,420,924 (100.0%) 1,524 (100.0%) 1,509 (100.0%) 2,300,630,555 (100.0%) 1,090,521,032 (100.0%) 1,370 (100.0%) 281,034,183 (100.0%) 136,447,385 (100.0%) 197,204 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      I1mr        ILmr        Dr                     D1mr                   DLmr         Dw                   D1mw                 DLmw             file:function
--------------------------------------------------------------------------------
10,351,674,516 (94.35%)  4 ( 0.26%)  4 ( 0.27%) 2,147,500,167 (93.34%) 1,090,519,295 (100.0%)   0          268,435,592 (95.52%) 136,314,626 (99.90%) 65,536 (33.23%)  /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c:matrix_multiply
   536,871,424 ( 4.89%)  0           0            134,217,856 ( 5.83%)             0            0                    0                    0               0           /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c:min.constprop.0
    33,419,132 ( 0.30%)  2 ( 0.13%)  2 ( 0.13%)     8,388,608 ( 0.36%)             4 ( 0.00%)   2 ( 0.15%)   3,145,728 ( 1.12%)           0               0           ./stdlib/./stdlib/random_r.c:random_r
    22,020,096 ( 0.20%)  3 ( 0.20%)  3 ( 0.20%)     8,388,608 ( 0.36%)             2 ( 0.00%)   1 ( 0.07%)   2,097,152 ( 0.75%)           0               0           ./stdlib/./stdlib/random.c:random
    15,733,770 ( 0.14%)  1 ( 0.07%)  1 ( 0.07%)             4 ( 0.00%)             0            0            2,097,155 ( 0.75%)      65,536 ( 0.05%) 65,536 (33.23%)  /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c:matrix_init_random

--------------------------------------------------------------------------------
-- Auto-annotated source: /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr                   DLmr       Dw                   D1mw                 DLmw            

-- line 28 ----------------------------------------
            .          .          .                      .                      .          .                    .                    .               .            * Use this constant when you implement loop blocking.
            .          .          .                      .                      .          .                    .                    .               .            */
            .          .          .                      .                      .          .                    .                    .               .           #if (BLOCK + 0)==0
            .          .          .                      .                      .          .                    .                    .               .           #  undef BLOCK
            .          .          .                      .                      .          .                    .                    .               .           #  define BLOCK 0
            .          .          .                      .                      .          .                    .                    .               .           #endif
            .          .          .                      .                      .          .                    .                    .               .           
            .          .          .                      .                      .          .                    .                    .               .           static inline int min(int a, int b) {
  402,653,568 ( 3.67%) 0          0                      0                      0          0                    0                    0               0             return (a < b) ? a : b;
  134,217,856 ( 1.22%) 0          0            134,217,856 ( 5.83%)             0          0                    0                    0               0           }
            .          .          .                      .                      .          .                    .                    .               .           
            .          .          .                      .                      .          .                    .                    .               .           static void
            .          .          .                      .                      .          .                    .                    .               .           matrix_clear(float matrix[N][N])
            .          .          .                      .                      .          .                    .                    .               .           {
            .          .          .                      .                      .          .                    .                    .               .             for (size_t i = 0; i < N; ++i)
            .          .          .                      .                      .          .                    .                    .               .               for (size_t j = 0; j < N; ++j)
            3 ( 0.00%) 0          0                      0                      0          0                    0                    0               0                 matrix[i][j] = 0;
            .          .          .                      .                      .          .                    .                    .               .           }
            .          .          .                      .                      .          .                    .                    .               .           
            .          .          .                      .                      .          .                    .                    .               .           static void
            .          .          .                      .                      .          .                    .                    .               .           matrix_init_identity(float matrix[N][N])
            2 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)             0                      0          0                    1 ( 0.00%)           0               0           {
            1 ( 0.00%) 0          0                      0                      0          0                    1 ( 0.00%)           0               0             matrix_clear(matrix);
            .          .          .                      .                      .          .                    .                    .               .           
        3,076 ( 0.00%) 0          0                      1 ( 0.00%)             1 ( 0.00%) 1 ( 0.07%)           0                    0               0             for (size_t i = 0; i < N; ++i)
        1,024 ( 0.00%) 0          0                      0                      0          0                1,024 ( 0.00%)       1,024 ( 0.00%)      0               matrix[i][i] = 1.;
            2 ( 0.00%) 0          0                      2 ( 0.00%)             1 ( 0.00%) 0                    0                    0               0           }
            .          .          .                      .                      .          .                    .                    .               .           
            .          .          .                      .                      .          .                    .                    .               .           static void
            .          .          .                      .                      .          .                    .                    .               .           matrix_init_random(float matrix[N][N])
            6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)             0                      0          0                    3 ( 0.00%)           0               0           {
        3,072 ( 0.00%) 0          0                      0                      0          0                    0                    0               0             for (size_t i = 0; i < N; ++i)
    3,147,776 ( 0.03%) 0          0                      0                      0          0                    0                    0               0               for (size_t j = 0; j < N; ++j)
   12,582,912 ( 0.11%) 0          0                      0                      0          0            2,097,152 ( 0.75%)      65,536 ( 0.05%) 65,536 (33.23%)        matrix[i][j] = rand() % 100;
            4 ( 0.00%) 0          0                      4 ( 0.00%)             0          0                    0                    0               0           }
            .          .          .                      .                      .          .                    .                    .               .           
            .          .          .                      .                      .          .                    .                    .               .           void
            .          .          .                      .                      .          .                    .                    .               .           matrix_dump(float matrix[N][N])
            .          .          .                      .                      .          .                    .                    .               .           {
            .          .          .                      .                      .          .                    .                    .               .             for (size_t i = 0; i < N; ++i)
            .          .          .                      .                      .          .                    .                    .               .               {
            .          .          .                      .                      .          .                    .                    .               .                 for (size_t j = 0; j < N; ++j)
            .          .          .                      .                      .          .                    .                    .               .                   printf("%f ", matrix[i][j]);
-- line 70 ----------------------------------------
-- line 97 ----------------------------------------
            .          .          .                      .                      .          .                    .                    .               .                   C[i][j] = row;
            .          .          .                      .                      .          .                    .                    .               .                 }
            .          .          .                      .                      .          .                    .                    .               .           }
            .          .          .                      .                      .          .                    .                    .               .           
            .          .          .                      .                      .          .                    .                    .               .           #else
            .          .          .                      .                      .          .                    .                    .               .           // blocked multiply
            .          .          .                      .                      .          .                    .                    .               .           static void
            .          .          .                      .                      .          .                    .                    .               .           matrix_multiply(float C[N][N], const float A[N][N], const float B[N][N])
           11 ( 0.00%) 2 ( 0.13%) 2 ( 0.13%)             0                      0          0                    8 ( 0.00%)           0               0           {
          385 ( 0.00%) 0          0                      0                      0          0                    0                    0               0             for (size_t jj = 0; jj < N; jj += BLOCK) {
       49,152 ( 0.00%) 0          0                      0                      0          0                    0                    0               0               for (size_t kk = 0; kk < N; kk += BLOCK) {
   67,125,248 ( 0.61%) 0          0                      0                      0          0                    0                    0               0                 for (size_t i = 0; i < N; i++) {
  587,236,096 ( 5.35%) 1 ( 0.07%) 1 ( 0.07%)        16,512 ( 0.00%)           254 ( 0.00%) 0                  128 ( 0.00%)           2 ( 0.00%)      0                   for (size_t j = jj; j < min(jj+BLOCK, N); j++) {
  134,217,728 ( 1.22%) 0          0                      0                      0          0                    0                    0               0                     float row = 0.0;
4,026,564,608 (36.70%) 1 ( 0.07%) 1 ( 0.07%)             0                      0          0          134,217,728 (47.76%)   2,096,896 ( 1.54%)      0                     for (size_t k = kk; k < min(kk+BLOCK, N); k++) {
5,402,263,552 (49.24%) 0          0          2,147,483,648 (93.34%) 1,090,519,040 (100.0%) 0                    0                    0               0                       row += A[i][k] * B[k][j];
            .          .          .                      .                      .          .                    .                    .               .                     }
  134,217,728 ( 1.22%) 0          0                      0                      0          0          134,217,728 (47.76%) 134,217,728 (98.37%) 65,536 (33.23%)            C[i][j] = row;
            .          .          .                      .                      .          .                    .                    .               .                   }
            .          .          .                      .                      .          .                    .                    .               .                 }
            .          .          .                      .                      .          .                    .                    .               .               }
            .          .          .                      .                      .          .                    .                    .               .             }
            8 ( 0.00%) 0          0                      7 ( 0.00%)             1 ( 0.00%) 0                    0                    0               0           }
            .          .          .                      .                      .          .                    .                    .               .           
            .          .          .                      .                      .          .                    .                    .               .           #endif
            .          .          .                      .                      .          .                    .                    .               .           
            .          .          .                      .                      .          .                    .                    .               .           int
            .          .          .                      .                      .          .                    .                    .               .           main(int argc, char **argv)
           11 ( 0.00%) 2 ( 0.13%) 2 ( 0.13%)             1 ( 0.00%)             0          0                    7 ( 0.00%)           0               0           {
            .          .          .                      .                      .          .                    .                    .               .             /* We use this "magic" to allocate real two-dimensional arrays, that
            .          .          .                      .                      .          .                    .                    .               .              * are aligned at 64-bytes (cache line size).
            .          .          .                      .                      .          .                    .                    .               .              */
            2 ( 0.00%) 0          0                      0                      0          0                    1 ( 0.00%)           0               0             float (*A)[N] = (float (*)[N])_mm_malloc(N * N * sizeof(float), 64);
            2 ( 0.00%) 0          0                      0                      0          0                    1 ( 0.00%)           0               0             float (*B)[N] = (float (*)[N])_mm_malloc(N * N * sizeof(float), 64);
            2 ( 0.00%) 0          0                      0                      0          0                    1 ( 0.00%)           0               0             float (*C)[N] = (float (*)[N])_mm_malloc(N * N * sizeof(float), 64);
            .          .          .                      .                      .          .                    .                    .               .           
            .          .          .                      .                      .          .                    .                    .               .             struct timespec init_start_time, init_end_time;
            3 ( 0.00%) 0          0                      0                      0          0                    1 ( 0.00%)           0               0             get_time(&init_start_time);
            .          .          .                      .                      .          .                    .                    .               .           
            2 ( 0.00%) 0          0                      0                      0          0                    1 ( 0.00%)           0               0             matrix_init_identity(A);
            2 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)             0                      0          0                    1 ( 0.00%)           0               0             matrix_init_random(B);
            .          .          .                      .                      .          .                    .                    .               .           
            3 ( 0.00%) 0          0                      0                      0          0                    1 ( 0.00%)           0               0             get_time(&init_end_time);
            .          .          .                      .                      .          .                    .                    .               .           
            .          .          .                      .                      .          .                    .                    .               .             /* Perform the matrix multiplication */
            .          .          .                      .                      .          .                    .                    .               .             struct timespec compute_start_time, compute_end_time;
            4 ( 0.00%) 0          0                      0                      0          0                    2 ( 0.00%)           0               0             get_time(&compute_start_time);
            .          .          .                      .                      .          .                    .                    .               .           
            .          .          .                      .                      .          .                    .                    .               .             for (int Z = 0; Z < N_REPEAT; ++Z)
            4 ( 0.00%) 0          0                      0                      0          0                    1 ( 0.00%)           0               0               matrix_multiply(C, A, B);
            .          .          .                      .                      .          .                    .                    .               .           
            3 ( 0.00%) 0          0                      0                      0          0                    1 ( 0.00%)           0               0             get_time(&compute_end_time);
            .          .          .                      .                      .          .                    .                    .               .           
            .          .          .                      .                      .          .                    .                    .               .           
            .          .          .                      .                      .          .                    .                    .               .           #ifdef ENABLE_TIMING
            .          .          .                      .                      .          .                    .                    .               .             /* Output result in CSV for easy processing */
            .          .          .                      .                      .          .                    .                    .               .             /* N,init time,n_repeat,runtime */
            7 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)             1 ( 0.00%)             0          0                    3 ( 0.00%)           0               0             printf("%d,%f,%d,%f\n",
            .          .          .                      .                      .          .                    .                    .               .                    N,
            .          .          .                      .                      .          .                    .                    .               .                    get_elapsed_ms(&init_end_time, &init_start_time),
            .          .          .                      .                      .          .                    .                    .               .                    N_REPEAT,
            .          .          .                      .                      .          .                    .                    .               .                    get_elapsed_ms(&compute_end_time, &compute_start_time));
            .          .          .                      .                      .          .                    .                    .               .           #endif /* ENABLE_TIMING */
            .          .          .                      .                      .          .                    .                    .               .           
            .          .          .                      .                      .          .                    .                    .               .           #if 0
            .          .          .                      .                      .          .                    .                    .               .             /* For debugging */
            .          .          .                      .                      .          .                    .                    .               .             if (!matrix_equal(C, B))
            .          .          .                      .                      .          .                    .                    .               .               fprintf(stderr, "Matrices are not equal!!\n");
            .          .          .                      .                      .          .                    .                    .               .           #endif
            .          .          .                      .                      .          .                    .                    .               .           
            2 ( 0.00%) 0          0                      0                      0          0                    1 ( 0.00%)           0               0             _mm_free(A);
            2 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)             0                      0          0                    1 ( 0.00%)           0               0             _mm_free(B);
            2 ( 0.00%) 0          0                      0                      0          0                    1 ( 0.00%)           0               0             _mm_free(C);
            .          .          .                      .                      .          .                    .                    .               .           
            .          .          .                      .                      .          .                    .                    .               .             return 0;
           12 ( 0.00%) 0          0                      9 ( 0.00%)             2 ( 0.00%) 0                    0                    0               0           }
--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
Ir                      I1mr        ILmr        Dr                     D1mr                   DLmr       Dw                   D1mw                 DLmw             
--------------------------------------------------------------------------------
10,904,283,881 (99.39%) 11 ( 0.72%) 11 ( 0.73%) 2,281,718,041 (99.18%) 1,090,519,299 (100.0%) 1 ( 0.07%) 270,533,797 (96.26%) 136,381,186 (99.95%) 131,072 (66.47%)  events annotated

