--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         49152 B, 64 B, 12-way associative
LL cache:         35651584 B, 64 B, 17-way associative
Command:          ./tilecomposite test2048.png bricks256.png 1 out2.png
Data file:        cachegrind.out.2573652
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     I1mr           ILmr           Dr                     D1mr                 DLmr           Dw                   D1mw               DLmw             
--------------------------------------------------------------------------------
9,875,868,284 (100.0%) 6,464 (100.0%) 2,826 (100.0%) 2,141,657,581 (100.0%) 259,859,619 (100.0%) 2,095 (100.0%) 549,088,582 (100.0%) 3,256,918 (100.0%) 269,513 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                     I1mr           ILmr         Dr                     D1mr                 DLmr         Dw                   D1mw               DLmw              file:function
--------------------------------------------------------------------------------
7,972,254,103 (80.72%) 2,617 (40.49%) 698 (24.70%) 1,838,728,489 (85.86%) 258,658,752 (99.54%) 118 ( 5.63%) 429,392,422 (78.20%) 1,187,699 (36.47%)   1,952 ( 0.72%)  ???:???
1,679,524,806 (17.01%)    52 ( 0.80%)  52 ( 1.84%)   223,108,607 (10.42%)     278,499 ( 0.11%)   0           79,324,447 (14.45%)   525,222 (16.13%)       0           ???:png_write_row
  100,969,360 ( 1.02%)   315 ( 4.87%)  26 ( 0.92%)    37,108,792 ( 1.73%)           0            0            3,799,364 ( 0.69%)     3,508 ( 0.11%)       0           ???:adler32_z
   47,741,061 ( 0.48%)     9 ( 0.14%)   8 ( 0.28%)     3,680,284 ( 0.17%)      67,593 ( 0.03%)   0              524,311 ( 0.10%)         0                0           /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/tilecomposite.c:op_tile_composite
   38,124,377 ( 0.39%)    29 ( 0.45%)  13 ( 0.46%)    32,126,105 ( 1.50%)     807,197 ( 0.31%) 127 ( 6.06%)  32,064,752 ( 5.84%) 1,526,427 (46.87%) 265,274 (98.43%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
   35,238,834 ( 0.36%)   718 (11.11%) 100 ( 3.54%)     6,418,228 ( 0.30%)      16,672 ( 0.01%)   5 ( 0.24%)   3,604,507 ( 0.66%)     6,263 ( 0.19%)       9 ( 0.00%)  ???:inflate

--------------------------------------------------------------------------------
-- Auto-annotated source: /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/tilecomposite.c
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr               D1mr            DLmr       Dw               D1mw       DLmw       

-- line 13 ----------------------------------------
         .          .          .                .               .          .                .          .          .           #include <stdio.h>
         .          .          .                .               .          .                .          .          .           #include <stdlib.h>
         .          .          .                .               .          .                .          .          .           #include <string.h>
         .          .          .                .               .          .                .          .          .           #include <errno.h>
         .          .          .                .               .          .                .          .          .           #include <assert.h>
         .          .          .                .               .          .                .          .          .           
         .          .          .                .               .          .                .          .          .           static inline const char *
         .          .          .                .               .          .                .          .          .           get_basename(const char *str)
         4 ( 0.00%) 0          0                0               0          0                2 ( 0.00%) 0          0           {
         4 ( 0.00%) 0          0                0               0          0                2 ( 0.00%) 0          0             const char *end = strrchr(str, '/');
         .          .          .                .               .          .                .          .          .             if (!end)
         .          .          .                .               .          .                .          .          .               return str;
         8 ( 0.00%) 0          0                0               0          0                0          0          0             return end + 1;
         4 ( 0.00%) 0          0                4 ( 0.00%)      0          0                0          0          0           }
         .          .          .                .               .          .                .          .          .           
         .          .          .                .               .          .                .          .          .           /* Tiles the @tile image over a diagonal on @background using alpha blending.
         .          .          .                .               .          .                .          .          .            * For the tile an alpha value of @tile_alpha is used.
         .          .          .                .               .          .                .          .          .            */
         .          .          .                .               .          .                .          .          .           void
         .          .          .                .               .          .                .          .          .           op_tile_composite(image_t * const background,
         .          .          .                .               .          .                .          .          .                             const image_t * const tile, const float tile_alpha)
         7 ( 0.00%) 1 ( 0.02%) 1 ( 0.04%)       0               0          0                6 ( 0.00%) 0          0           {
         5 ( 0.00%) 0          0                2 ( 0.00%)      0          0                1 ( 0.00%) 0          0             const int d_height = MIN(background->width, background->height);
         .          .          .                .               .          .                .          .          .           
        21 ( 0.00%) 1 ( 0.02%) 1 ( 0.04%)       8 ( 0.00%)      0          0                0          0          0             for (int d = 0; d < d_height; d += tile->height)
   536,611 ( 0.01%) 1 ( 0.02%) 0          528,385 ( 0.02%)      0          0                0          0          0               for (int y = d; y < d + tile->height; y++)
 3,149,880 ( 0.03%) 1 ( 0.02%) 1 ( 0.04%) 524,296 ( 0.02%)      0          0               16 ( 0.00%) 0          0                 for (int x = d; x < d + tile->width; x++)
         .          .          .                .               .          .                .          .          .                   {
 1,572,864 ( 0.02%) 0          0                0               0          0                0          0          0                     int tx = x % tile->width;
 1,572,864 ( 0.02%) 0          0          524,288 ( 0.02%)      0          0                0          0          0                     int ty = y % tile->height;
         .          .          .                .               .          .                .          .          .           
 2,623,488 ( 0.03%) 1 ( 0.02%) 1 ( 0.04%) 526,336 ( 0.02%)      0          0                0          0          0                     uint32_t * const b_pixel = image_get_pixel(background, x, y);
 3,147,776 ( 0.03%) 0          0          526,336 ( 0.02%)      0          0                0          0          0                     uint32_t * const t_pixel = image_get_pixel(tile, tx, ty);
         .          .          .                .               .          .                .          .          .                     rgba_t dst, src;
10,485,760 ( 0.11%) 2 ( 0.03%) 2 ( 0.07%) 524,288 ( 0.02%) 34,816 ( 0.01%) 0                0          0          0                     RGBA_unpack(dst, *b_pixel);
10,485,760 ( 0.11%) 1 ( 0.02%) 1 ( 0.04%) 524,288 ( 0.02%) 32,776 ( 0.01%) 0                0          0          0                     RGBA_unpack(src, *t_pixel);
 2,097,152 ( 0.02%) 0          0                0               0          0                0          0          0                     RGBA_mults(src, src, tile_alpha);
 2,107,394 ( 0.02%) 0          0            2,050 ( 0.00%)      0          0                0          0          0                     RGBA_mults(dst, dst, 1.f - tile_alpha);
 2,097,152 ( 0.02%) 0          0                0               0          0                0          0          0                     RGBA_add(dst, dst, src);
 7,864,320 ( 0.08%) 1 ( 0.02%) 1 ( 0.04%)       0               0          0          524,288 ( 0.10%) 0          0                     RGBA_pack(*b_pixel, dst);
         .          .          .                .               .          .                .          .          .                   }
         7 ( 0.00%) 0          0                7 ( 0.00%)      1 ( 0.00%) 0                0          0          0           }
         .          .          .                .               .          .                .          .          .           
         .          .          .                .               .          .                .          .          .           
         .          .          .                .               .          .                .          .          .           
         .          .          .                .               .          .                .          .          .           int
         .          .          .                .               .          .                .          .          .           main(int argc, char **argv)
        11 ( 0.00%) 2 ( 0.03%) 2 ( 0.07%)       1 ( 0.00%)      0          0                7 ( 0.00%) 0          0           {
         2 ( 0.00%) 0          0                0               0          0                0          0          0             if (argc < 4)
         .          .          .                .               .          .                .          .          .               {
         .          .          .                .               .          .                .          .          .                 fprintf(stderr, "usage: %s <infile> <tilefile> <n_repeat> [outfile]\n", argv[0]);
         .          .          .                .               .          .                .          .          .                 fprintf(stderr, "\n  where <infile>, <tilefile> and [outfile] are PNG files.");
         .          .          .                .               .          .                .          .          .                 fprintf(stderr, "\n  <n_repeat> is the number of times the computation should be repeated.");
         .          .          .                .               .          .                .          .          .                 fprintf(stderr, "\n  [outfile] is an optional parameter.\n");
         .          .          .                .               .          .                .          .          .                 return EXIT_FAILURE;
         .          .          .                .               .          .                .          .          .               }
         .          .          .                .               .          .                .          .          .           
         1 ( 0.00%) 0          0                1 ( 0.00%)      0          0                0          0          0             const char *infile = argv[1];
         1 ( 0.00%) 0          0                1 ( 0.00%)      0          0                0          0          0             const char *tilefile = argv[2];
         .          .          .                .               .          .                .          .          .             long int n_repeat = 0;
         2 ( 0.00%) 0          0                1 ( 0.00%)      1 ( 0.00%) 0                1 ( 0.00%) 0          0             const char *outfile = argv[4];
         .          .          .                .               .          .                .          .          .           
         6 ( 0.00%) 0          0                1 ( 0.00%)      0          0                2 ( 0.00%) 0          0             n_repeat = strtol(argv[3], NULL, 10);
         5 ( 0.00%) 1 ( 0.02%) 1 ( 0.04%)       1 ( 0.00%)      0          0                1 ( 0.00%) 0          0             if (errno > 0 || n_repeat == 0)
         .          .          .                .               .          .                .          .          .               {
         .          .          .                .               .          .                .          .          .                 fprintf(stderr, "Could not convert n_repeat argument to integer.\n");
         .          .          .                .               .          .                .          .          .                 return EXIT_FAILURE;
         .          .          .                .               .          .                .          .          .               }
         .          .          .                .               .          .                .          .          .           
         .          .          .                .               .          .                .          .          .             /* Load PNG images */
         .          .          .                .               .          .                .          .          .             struct timespec load_start_time, load_end_time;
         3 ( 0.00%) 0          0                0               0          0                2 ( 0.00%) 0          0             get_time(&load_start_time);
         .          .          .                .               .          .                .          .          .           
         .          .          .                .               .          .                .          .          .             /* Load tile first on purpose, to ensure it is evicted from the caches
         .          .          .                .               .          .                .          .          .              * by the load of the background. Do not change this!
         .          .          .                .               .          .                .          .          .              */
         3 ( 0.00%) 1 ( 0.02%) 0                0               0          0                1 ( 0.00%) 0          0             image_t *tile = image_new_from_pngfile(tilefile);
         2 ( 0.00%) 0          0                0               0          0                0          0          0             if (!tile)
         .          .          .                .               .          .                .          .          .               return EXIT_FAILURE;
         .          .          .                .               .          .                .          .          .           
         3 ( 0.00%) 1 ( 0.02%) 0                0               0          0                1 ( 0.00%) 0          0             image_t *background = image_new_from_pngfile(infile);
         2 ( 0.00%) 1 ( 0.02%) 1 ( 0.04%)       0               0          0                0          0          0             if (!background)
         .          .          .                .               .          .                .          .          .               return EXIT_FAILURE;
         .          .          .                .               .          .                .          .          .           
         4 ( 0.00%) 0          0                0               0          0                2 ( 0.00%) 1 ( 0.00%) 0             get_time(&load_end_time);
         .          .          .                .               .          .                .          .          .           
         .          .          .                .               .          .                .          .          .           #if ENABLE_TIMING
         .          .          .                .               .          .                .          .          .             printf("filename,tile filename,load time,tilecomposite time\n");
         .          .          .                .               .          .                .          .          .           #endif /* ENABLE_TIMING */
         .          .          .                .               .          .                .          .          .           
         .          .          .                .               .          .                .          .          .             /* Execute */
        11 ( 0.00%) 1 ( 0.02%) 1 ( 0.04%)       2 ( 0.00%)      0          0                1 ( 0.00%) 0          0             for (long int Z = 0; Z < n_repeat; Z++)
         .          .          .                .               .          .                .          .          .               {
         .          .          .                .               .          .                .          .          .                 struct timespec start_time, end_time;
         .          .          .                .               .          .                .          .          .           
         2 ( 0.00%) 0          0                0               0          0                1 ( 0.00%) 0          0                 get_time(&start_time);
         .          .          .                .               .          .                .          .          .           
         4 ( 0.00%) 0          0                1 ( 0.00%)      0          0                1 ( 0.00%) 0          0                 op_tile_composite(background, tile, 0.2f);
         .          .          .                .               .          .                .          .          .           
         2 ( 0.00%) 0          0                0               0          0                1 ( 0.00%) 0          0                 get_time(&end_time);
         .          .          .                .               .          .                .          .          .           
         .          .          .                .               .          .                .          .          .           #if ENABLE_TIMING
         .          .          .                .               .          .                .          .          .                 /* Output result in CSV for easy processing */
         .          .          .                .               .          .                .          .          .                 /* filename,tile filename,load time,compute time */
        14 ( 0.00%) 1 ( 0.02%) 1 ( 0.04%)       3 ( 0.00%)      1 ( 0.00%) 0                7 ( 0.00%) 0          0                 printf("%s,%s,%f,%f\n",
         .          .          .                .               .          .                .          .          .                        get_basename(infile), get_basename(tilefile),
         .          .          .                .               .          .                .          .          .                        get_elapsed_ms(&load_end_time, &load_start_time),
         .          .          .                .               .          .                .          .          .                        get_elapsed_ms(&end_time, &start_time));
         .          .          .                .               .          .                .          .          .           #endif /* ENABLE_TIMING */
         .          .          .                .               .          .                .          .          .               }
         .          .          .                .               .          .                .          .          .           
         .          .          .                .               .          .                .          .          .             /* Save result if desired and if applicable */
         3 ( 0.00%) 0          0                0               0          0                0          0          0             int retval = EXIT_SUCCESS;
         6 ( 0.00%) 2 ( 0.03%) 1 ( 0.04%)       2 ( 0.00%)      0          0                1 ( 0.00%) 0          0             if (outfile && background && !image_save_as_pngfile(background, outfile))
         .          .          .                .               .          .                .          .          .               retval = EXIT_FAILURE;
         .          .          .                .               .          .                .          .          .           
         3 ( 0.00%) 1 ( 0.02%) 0                0               0          0                2 ( 0.00%) 0          0             image_free(background);
         3 ( 0.00%) 1 ( 0.02%) 1 ( 0.04%)       1 ( 0.00%)      0          0                1 ( 0.00%) 0          0             image_free(tile);
         .          .          .                .               .          .                .          .          .           
         1 ( 0.00%) 0          0                0               0          0                0          0          0             return retval;
        11 ( 0.00%) 1 ( 0.02%) 1 ( 0.04%)       9 ( 0.00%)      2 ( 0.00%) 0                0          0          0           }
--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                  I1mr        ILmr        Dr                 D1mr            DLmr       Dw               D1mw       DLmw       
--------------------------------------------------------------------------------
47,741,186 ( 0.48%) 22 ( 0.34%) 17 ( 0.60%) 3,680,312 ( 0.17%) 67,597 ( 0.03%) 0          524,347 ( 0.10%) 1 ( 0.00%) 0           events annotated

