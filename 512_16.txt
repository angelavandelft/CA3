--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         49152 B, 64 B, 12-way associative
LL cache:         35651584 B, 64 B, 17-way associative
Command:          ./matrixmul-1-512-16
Data file:        cachegrind.out.1251443
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     I1mr           ILmr           Dr                   D1mr             DLmr           Dw                  D1mw             DLmw            
--------------------------------------------------------------------------------
1,233,529,336 (100.0%) 1,520 (100.0%) 1,493 (100.0%) 281,581,603 (100.0%) 542,357 (100.0%) 1,370 (100.0%) 19,937,981 (100.0%) 558,210 (100.0%) 49,748 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                     I1mr        ILmr        Dr                   D1mr             DLmr         Dw                  D1mw             DLmw             file:function
--------------------------------------------------------------------------------
1,179,132,212 (95.59%)  4 ( 0.26%)  4 ( 0.27%) 268,436,519 (95.33%) 540,673 (99.69%)   0          16,777,256 (84.15%) 524,288 (93.92%) 16,384 (32.93%)  /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c:matrix_multiply
   33,554,560 ( 2.72%)  0           0            8,388,640 ( 2.98%)       0            0                   0                0               0           /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c:min.constprop.0
    8,354,784 ( 0.68%)  2 ( 0.13%)  2 ( 0.13%)   2,097,152 ( 0.74%)       4 ( 0.00%)   2 ( 0.15%)    786,432 ( 3.94%)       0               0           ./stdlib/./stdlib/random_r.c:random_r
    5,505,024 ( 0.45%)  3 ( 0.20%)  3 ( 0.20%)   2,097,152 ( 0.74%)       2 ( 0.00%)   1 ( 0.07%)    524,288 ( 2.63%)       0               0           ./stdlib/./stdlib/random.c:random
    3,934,730 ( 0.32%)  1 ( 0.07%)  1 ( 0.07%)           4 ( 0.00%)       0            0             524,291 ( 2.63%)  16,384 ( 2.94%) 16,384 (32.93%)  /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c:matrix_init_random
    1,310,720 ( 0.11%)  1 ( 0.07%)  1 ( 0.07%)     262,144 ( 0.09%)       0            0             262,144 ( 1.31%)       1 ( 0.00%)      0           ./stdlib/./stdlib/rand.c:rand

--------------------------------------------------------------------------------
-- Auto-annotated source: /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                   D1mr             DLmr       Dw                 D1mw             DLmw            

-- line 28 ----------------------------------------
          .          .          .                    .                .          .                  .                .               .            * Use this constant when you implement loop blocking.
          .          .          .                    .                .          .                  .                .               .            */
          .          .          .                    .                .          .                  .                .               .           #if (BLOCK + 0)==0
          .          .          .                    .                .          .                  .                .               .           #  undef BLOCK
          .          .          .                    .                .          .                  .                .               .           #  define BLOCK 0
          .          .          .                    .                .          .                  .                .               .           #endif
          .          .          .                    .                .          .                  .                .               .           
          .          .          .                    .                .          .                  .                .               .           static inline int min(int a, int b) {
 25,165,920 ( 2.04%) 0          0                    0                0          0                  0                0               0             return (a < b) ? a : b;
  8,388,640 ( 0.68%) 0          0            8,388,640 ( 2.98%)       0          0                  0                0               0           }
          .          .          .                    .                .          .                  .                .               .           
          .          .          .                    .                .          .                  .                .               .           static void
          .          .          .                    .                .          .                  .                .               .           matrix_clear(float matrix[N][N])
          .          .          .                    .                .          .                  .                .               .           {
          .          .          .                    .                .          .                  .                .               .             for (size_t i = 0; i < N; ++i)
          .          .          .                    .                .          .                  .                .               .               for (size_t j = 0; j < N; ++j)
          3 ( 0.00%) 0          0                    0                0          0                  0                0               0                 matrix[i][j] = 0;
          .          .          .                    .                .          .                  .                .               .           }
          .          .          .                    .                .          .                  .                .               .           
          .          .          .                    .                .          .                  .                .               .           static void
          .          .          .                    .                .          .                  .                .               .           matrix_init_identity(float matrix[N][N])
          2 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           0                0          0                  1 ( 0.00%)       0               0           {
          1 ( 0.00%) 0          0                    0                0          0                  1 ( 0.00%)       0               0             matrix_clear(matrix);
          .          .          .                    .                .          .                  .                .               .           
      1,540 ( 0.00%) 0          0                    1 ( 0.00%)       1 ( 0.00%) 1 ( 0.07%)         0                0               0             for (size_t i = 0; i < N; ++i)
        512 ( 0.00%) 0          0                    0                0          0                512 ( 0.00%)     496 ( 0.09%)      0               matrix[i][i] = 1.;
          2 ( 0.00%) 0          0                    2 ( 0.00%)       0          0                  0                0               0           }
          .          .          .                    .                .          .                  .                .               .           
          .          .          .                    .                .          .                  .                .               .           static void
          .          .          .                    .                .          .                  .                .               .           matrix_init_random(float matrix[N][N])
          6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           0                0          0                  3 ( 0.00%)       0               0           {
      1,536 ( 0.00%) 0          0                    0                0          0                  0                0               0             for (size_t i = 0; i < N; ++i)
    787,456 ( 0.06%) 0          0                    0                0          0                  0                0               0               for (size_t j = 0; j < N; ++j)
  3,145,728 ( 0.26%) 0          0                    0                0          0            524,288 ( 2.63%)  16,384 ( 2.94%) 16,384 (32.93%)        matrix[i][j] = rand() % 100;
          4 ( 0.00%) 0          0                    4 ( 0.00%)       0          0                  0                0               0           }
          .          .          .                    .                .          .                  .                .               .           
          .          .          .                    .                .          .                  .                .               .           void
          .          .          .                    .                .          .                  .                .               .           matrix_dump(float matrix[N][N])
          .          .          .                    .                .          .                  .                .               .           {
          .          .          .                    .                .          .                  .                .               .             for (size_t i = 0; i < N; ++i)
          .          .          .                    .                .          .                  .                .               .               {
          .          .          .                    .                .          .                  .                .               .                 for (size_t j = 0; j < N; ++j)
          .          .          .                    .                .          .                  .                .               .                   printf("%f ", matrix[i][j]);
-- line 70 ----------------------------------------
-- line 97 ----------------------------------------
          .          .          .                    .                .          .                  .                .               .                   C[i][j] = row;
          .          .          .                    .                .          .                  .                .               .                 }
          .          .          .                    .                .          .                  .                .               .           }
          .          .          .                    .                .          .                  .                .               .           
          .          .          .                    .                .          .                  .                .               .           #else
          .          .          .                    .                .          .                  .                .               .           // blocked multiply
          .          .          .                    .                .          .                  .                .               .           static void
          .          .          .                    .                .          .                  .                .               .           matrix_multiply(float C[N][N], const float A[N][N], const float B[N][N])
         11 ( 0.00%) 2 ( 0.13%) 2 ( 0.13%)           0                0          0                  8 ( 0.00%)       0               0           {
         97 ( 0.00%) 0          0                    0                0          0                  0                0               0             for (size_t jj = 0; jj < N; jj += BLOCK) {
      3,072 ( 0.00%) 0          0                    0                0          0                  0                0               0               for (size_t kk = 0; kk < N; kk += BLOCK) {
  2,098,176 ( 0.17%) 0          0                    0                0          0                  0                0               0                 for (size_t i = 0; i < N; i++) {
 35,129,536 ( 2.85%) 1 ( 0.07%) 1 ( 0.07%)       1,056 ( 0.00%)       0          0                 32 ( 0.00%)       0               0                   for (size_t j = jj; j < min(jj+BLOCK, N); j++) {
  8,388,608 ( 0.68%) 0          0                    0                0          0                  0                0               0                     float row = 0.0;
452,986,880 (36.72%) 1 ( 0.07%) 1 ( 0.07%)           0                0          0          8,388,608 (42.07%)       0               0                     for (size_t k = kk; k < min(kk+BLOCK, N); k++) {
672,137,216 (54.49%) 0          0          268,435,456 (95.33%) 540,672 (99.69%) 0                  0                0               0                       row += A[i][k] * B[k][j];
          .          .          .                    .                .          .                  .                .               .                     }
  8,388,608 ( 0.68%) 0          0                    0                0          0          8,388,608 (42.07%) 524,288 (93.92%) 16,384 (32.93%)            C[i][j] = row;
          .          .          .                    .                .          .                  .                .               .                   }
          .          .          .                    .                .          .                  .                .               .                 }
          .          .          .                    .                .          .                  .                .               .               }
          .          .          .                    .                .          .                  .                .               .             }
          8 ( 0.00%) 0          0                    7 ( 0.00%)       1 ( 0.00%) 0                  0                0               0           }
          .          .          .                    .                .          .                  .                .               .           
          .          .          .                    .                .          .                  .                .               .           #endif
          .          .          .                    .                .          .                  .                .               .           
          .          .          .                    .                .          .                  .                .               .           int
          .          .          .                    .                .          .                  .                .               .           main(int argc, char **argv)
         11 ( 0.00%) 2 ( 0.13%) 2 ( 0.13%)           1 ( 0.00%)       0          0                  7 ( 0.00%)       0               0           {
          .          .          .                    .                .          .                  .                .               .             /* We use this "magic" to allocate real two-dimensional arrays, that
          .          .          .                    .                .          .                  .                .               .              * are aligned at 64-bytes (cache line size).
          .          .          .                    .                .          .                  .                .               .              */
          2 ( 0.00%) 0          0                    0                0          0                  1 ( 0.00%)       0               0             float (*A)[N] = (float (*)[N])_mm_malloc(N * N * sizeof(float), 64);
          2 ( 0.00%) 0          0                    0                0          0                  1 ( 0.00%)       0               0             float (*B)[N] = (float (*)[N])_mm_malloc(N * N * sizeof(float), 64);
          2 ( 0.00%) 0          0                    0                0          0                  1 ( 0.00%)       0               0             float (*C)[N] = (float (*)[N])_mm_malloc(N * N * sizeof(float), 64);
          .          .          .                    .                .          .                  .                .               .           
          .          .          .                    .                .          .                  .                .               .             struct timespec init_start_time, init_end_time;
          3 ( 0.00%) 0          0                    0                0          0                  1 ( 0.00%)       0               0             get_time(&init_start_time);
          .          .          .                    .                .          .                  .                .               .           
          2 ( 0.00%) 0          0                    0                0          0                  1 ( 0.00%)       0               0             matrix_init_identity(A);
          2 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           0                0          0                  1 ( 0.00%)       0               0             matrix_init_random(B);
          .          .          .                    .                .          .                  .                .               .           
          3 ( 0.00%) 0          0                    0                0          0                  1 ( 0.00%)       0               0             get_time(&init_end_time);
          .          .          .                    .                .          .                  .                .               .           
          .          .          .                    .                .          .                  .                .               .             /* Perform the matrix multiplication */
          .          .          .                    .                .          .                  .                .               .             struct timespec compute_start_time, compute_end_time;
          4 ( 0.00%) 0          0                    0                0          0                  2 ( 0.00%)       0               0             get_time(&compute_start_time);
          .          .          .                    .                .          .                  .                .               .           
          .          .          .                    .                .          .                  .                .               .             for (int Z = 0; Z < N_REPEAT; ++Z)
          4 ( 0.00%) 0          0                    0                0          0                  1 ( 0.00%)       0               0               matrix_multiply(C, A, B);
          .          .          .                    .                .          .                  .                .               .           
          3 ( 0.00%) 0          0                    0                0          0                  1 ( 0.00%)       0               0             get_time(&compute_end_time);
          .          .          .                    .                .          .                  .                .               .           
          .          .          .                    .                .          .                  .                .               .           
          .          .          .                    .                .          .                  .                .               .           #ifdef ENABLE_TIMING
          .          .          .                    .                .          .                  .                .               .             /* Output result in CSV for easy processing */
          .          .          .                    .                .          .                  .                .               .             /* N,init time,n_repeat,runtime */
          7 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           1 ( 0.00%)       0          0                  3 ( 0.00%)       0               0             printf("%d,%f,%d,%f\n",
          .          .          .                    .                .          .                  .                .               .                    N,
          .          .          .                    .                .          .                  .                .               .                    get_elapsed_ms(&init_end_time, &init_start_time),
          .          .          .                    .                .          .                  .                .               .                    N_REPEAT,
          .          .          .                    .                .          .                  .                .               .                    get_elapsed_ms(&compute_end_time, &compute_start_time));
          .          .          .                    .                .          .                  .                .               .           #endif /* ENABLE_TIMING */
          .          .          .                    .                .          .                  .                .               .           
          .          .          .                    .                .          .                  .                .               .           #if 0
          .          .          .                    .                .          .                  .                .               .             /* For debugging */
          .          .          .                    .                .          .                  .                .               .             if (!matrix_equal(C, B))
          .          .          .                    .                .          .                  .                .               .               fprintf(stderr, "Matrices are not equal!!\n");
          .          .          .                    .                .          .                  .                .               .           #endif
          .          .          .                    .                .          .                  .                .               .           
          2 ( 0.00%) 0          0                    0                0          0                  1 ( 0.00%)       0               0             _mm_free(A);
          2 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           0                0          0                  1 ( 0.00%)       0               0             _mm_free(B);
          2 ( 0.00%) 0          0                    0                0          0                  1 ( 0.00%)       0               0             _mm_free(C);
          .          .          .                    .                .          .                  .                .               .           
          .          .          .                    .                .          .                  .                .               .             return 0;
         12 ( 0.00%) 0          0                    9 ( 0.00%)       2 ( 0.00%) 0                  0                0               0           }
--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./stdlib/./stdlib/rand.c
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
Ir                     I1mr        ILmr        Dr                   D1mr             DLmr       Dw                  D1mw             DLmw            
--------------------------------------------------------------------------------
1,216,623,625 (98.63%) 11 ( 0.72%) 11 ( 0.74%) 276,825,177 (98.31%) 540,676 (99.69%) 1 ( 0.07%) 17,302,085 (86.78%) 541,168 (96.95%) 32,768 (65.87%)  events annotated

