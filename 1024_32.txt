--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         35651584 B, 64 B, 17-way associative
Command:          ./matrixmul-1-1024-32
Data file:        cachegrind.out.1250680
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     I1mr           ILmr           Dr                     D1mr                   DLmr           Dw                  D1mw                DLmw             
--------------------------------------------------------------------------------
9,219,126,300 (100.0%) 1,524 (100.0%) 1,509 (100.0%) 2,199,951,707 (100.0%) 1,076,889,320 (100.0%) 1,369 (100.0%) 79,707,495 (100.0%) 34,211,448 (100.0%) 197,204 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                     I1mr        ILmr        Dr                     D1mr                   DLmr         Dw                  D1mw                DLmw             file:function
--------------------------------------------------------------------------------
9,002,033,460 (97.65%)  4 ( 0.26%)  4 ( 0.27%) 2,147,484,711 (97.62%) 1,076,887,584 (100.0%)   0          67,108,904 (84.19%) 34,078,689 (99.61%) 65,536 (33.23%)  /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c:matrix_multiply
  134,217,856 ( 1.46%)  0           0             33,554,464 ( 1.53%)             0            0                   0                   0               0           /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c:min.constprop.0
   33,419,132 ( 0.36%)  2 ( 0.13%)  2 ( 0.13%)     8,388,608 ( 0.38%)             4 ( 0.00%)   2 ( 0.15%)  3,145,728 ( 3.95%)          0               0           ./stdlib/./stdlib/random_r.c:random_r
   22,020,096 ( 0.24%)  3 ( 0.20%)  3 ( 0.20%)     8,388,608 ( 0.38%)             2 ( 0.00%)   1 ( 0.07%)  2,097,152 ( 2.63%)          0               0           ./stdlib/./stdlib/random.c:random
   15,733,770 ( 0.17%)  1 ( 0.07%)  1 ( 0.07%)             4 ( 0.00%)             0            0           2,097,155 ( 2.63%)     65,536 ( 0.19%) 65,536 (33.23%)  /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c:matrix_init_random

--------------------------------------------------------------------------------
-- Auto-annotated source: /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr                   DLmr       Dw                  D1mw                DLmw            

-- line 28 ----------------------------------------
            .          .          .                      .                      .          .                   .                   .               .            * Use this constant when you implement loop blocking.
            .          .          .                      .                      .          .                   .                   .               .            */
            .          .          .                      .                      .          .                   .                   .               .           #if (BLOCK + 0)==0
            .          .          .                      .                      .          .                   .                   .               .           #  undef BLOCK
            .          .          .                      .                      .          .                   .                   .               .           #  define BLOCK 0
            .          .          .                      .                      .          .                   .                   .               .           #endif
            .          .          .                      .                      .          .                   .                   .               .           
            .          .          .                      .                      .          .                   .                   .               .           static inline int min(int a, int b) {
  100,663,392 ( 1.09%) 0          0                      0                      0          0                   0                   0               0             return (a < b) ? a : b;
   33,554,464 ( 0.36%) 0          0             33,554,464 ( 1.53%)             0          0                   0                   0               0           }
            .          .          .                      .                      .          .                   .                   .               .           
            .          .          .                      .                      .          .                   .                   .               .           static void
            .          .          .                      .                      .          .                   .                   .               .           matrix_clear(float matrix[N][N])
            .          .          .                      .                      .          .                   .                   .               .           {
            .          .          .                      .                      .          .                   .                   .               .             for (size_t i = 0; i < N; ++i)
            .          .          .                      .                      .          .                   .                   .               .               for (size_t j = 0; j < N; ++j)
            3 ( 0.00%) 0          0                      0                      0          0                   0                   0               0                 matrix[i][j] = 0;
            .          .          .                      .                      .          .                   .                   .               .           }
            .          .          .                      .                      .          .                   .                   .               .           
            .          .          .                      .                      .          .                   .                   .               .           static void
            .          .          .                      .                      .          .                   .                   .               .           matrix_init_identity(float matrix[N][N])
            2 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)             0                      0          0                   1 ( 0.00%)          0               0           {
            1 ( 0.00%) 0          0                      0                      0          0                   1 ( 0.00%)          0               0             matrix_clear(matrix);
            .          .          .                      .                      .          .                   .                   .               .           
        3,076 ( 0.00%) 0          0                      1 ( 0.00%)             1 ( 0.00%) 1 ( 0.07%)          0                   0               0             for (size_t i = 0; i < N; ++i)
        1,024 ( 0.00%) 0          0                      0                      0          0               1,024 ( 0.00%)      1,024 ( 0.00%)      0               matrix[i][i] = 1.;
            2 ( 0.00%) 0          0                      2 ( 0.00%)             1 ( 0.00%) 0                   0                   0               0           }
            .          .          .                      .                      .          .                   .                   .               .           
            .          .          .                      .                      .          .                   .                   .               .           static void
            .          .          .                      .                      .          .                   .                   .               .           matrix_init_random(float matrix[N][N])
            6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)             0                      0          0                   3 ( 0.00%)          0               0           {
        3,072 ( 0.00%) 0          0                      0                      0          0                   0                   0               0             for (size_t i = 0; i < N; ++i)
    3,147,776 ( 0.03%) 0          0                      0                      0          0                   0                   0               0               for (size_t j = 0; j < N; ++j)
   12,582,912 ( 0.14%) 0          0                      0                      0          0           2,097,152 ( 2.63%)     65,536 ( 0.19%) 65,536 (33.23%)        matrix[i][j] = rand() % 100;
            4 ( 0.00%) 0          0                      4 ( 0.00%)             0          0                   0                   0               0           }
            .          .          .                      .                      .          .                   .                   .               .           
            .          .          .                      .                      .          .                   .                   .               .           void
            .          .          .                      .                      .          .                   .                   .               .           matrix_dump(float matrix[N][N])
            .          .          .                      .                      .          .                   .                   .               .           {
            .          .          .                      .                      .          .                   .                   .               .             for (size_t i = 0; i < N; ++i)
            .          .          .                      .                      .          .                   .                   .               .               {
            .          .          .                      .                      .          .                   .                   .               .                 for (size_t j = 0; j < N; ++j)
            .          .          .                      .                      .          .                   .                   .               .                   printf("%f ", matrix[i][j]);
-- line 70 ----------------------------------------
-- line 97 ----------------------------------------
            .          .          .                      .                      .          .                   .                   .               .                   C[i][j] = row;
            .          .          .                      .                      .          .                   .                   .               .                 }
            .          .          .                      .                      .          .                   .                   .               .           }
            .          .          .                      .                      .          .                   .                   .               .           
            .          .          .                      .                      .          .                   .                   .               .           #else
            .          .          .                      .                      .          .                   .                   .               .           // blocked multiply
            .          .          .                      .                      .          .                   .                   .               .           static void
            .          .          .                      .                      .          .                   .                   .               .           matrix_multiply(float C[N][N], const float A[N][N], const float B[N][N])
           11 ( 0.00%) 2 ( 0.13%) 2 ( 0.13%)             0                      0          0                   8 ( 0.00%)          0               0           {
           97 ( 0.00%) 0          0                      0                      0          0                   0                   0               0             for (size_t jj = 0; jj < N; jj += BLOCK) {
        3,072 ( 0.00%) 0          0                      0                      0          0                   0                   0               0               for (size_t kk = 0; kk < N; kk += BLOCK) {
    4,195,328 ( 0.05%) 0          0                      0                      0          0                   0                   0               0                 for (size_t i = 0; i < N; i++) {
  137,365,696 ( 1.49%) 1 ( 0.07%) 1 ( 0.07%)         1,056 ( 0.00%)            31 ( 0.00%) 0                  32 ( 0.00%)          1 ( 0.00%)      0                   for (size_t j = jj; j < min(jj+BLOCK, N); j++) {
   33,554,432 ( 0.36%) 0          0                      0                      0          0                   0                   0               0                     float row = 0.0;
3,422,554,112 (37.12%) 1 ( 0.07%) 1 ( 0.07%)             0                      0          0          33,554,432 (42.10%)    524,256 ( 1.53%)      0                     for (size_t k = kk; k < min(kk+BLOCK, N); k++) {
5,370,806,272 (58.26%) 0          0          2,147,483,648 (97.62%) 1,076,887,552 (100.0%) 0                   0                   0               0                       row += A[i][k] * B[k][j];
            .          .          .                      .                      .          .                   .                   .               .                     }
   33,554,432 ( 0.36%) 0          0                      0                      0          0          33,554,432 (42.10%) 33,554,432 (98.08%) 65,536 (33.23%)            C[i][j] = row;
            .          .          .                      .                      .          .                   .                   .               .                   }
            .          .          .                      .                      .          .                   .                   .               .                 }
            .          .          .                      .                      .          .                   .                   .               .               }
            .          .          .                      .                      .          .                   .                   .               .             }
            8 ( 0.00%) 0          0                      7 ( 0.00%)             1 ( 0.00%) 0                   0                   0               0           }
            .          .          .                      .                      .          .                   .                   .               .           
            .          .          .                      .                      .          .                   .                   .               .           #endif
            .          .          .                      .                      .          .                   .                   .               .           
            .          .          .                      .                      .          .                   .                   .               .           int
            .          .          .                      .                      .          .                   .                   .               .           main(int argc, char **argv)
           11 ( 0.00%) 2 ( 0.13%) 2 ( 0.13%)             1 ( 0.00%)             0          0                   7 ( 0.00%)          0               0           {
            .          .          .                      .                      .          .                   .                   .               .             /* We use this "magic" to allocate real two-dimensional arrays, that
            .          .          .                      .                      .          .                   .                   .               .              * are aligned at 64-bytes (cache line size).
            .          .          .                      .                      .          .                   .                   .               .              */
            2 ( 0.00%) 0          0                      0                      0          0                   1 ( 0.00%)          0               0             float (*A)[N] = (float (*)[N])_mm_malloc(N * N * sizeof(float), 64);
            2 ( 0.00%) 0          0                      0                      0          0                   1 ( 0.00%)          0               0             float (*B)[N] = (float (*)[N])_mm_malloc(N * N * sizeof(float), 64);
            2 ( 0.00%) 0          0                      0                      0          0                   1 ( 0.00%)          0               0             float (*C)[N] = (float (*)[N])_mm_malloc(N * N * sizeof(float), 64);
            .          .          .                      .                      .          .                   .                   .               .           
            .          .          .                      .                      .          .                   .                   .               .             struct timespec init_start_time, init_end_time;
            3 ( 0.00%) 0          0                      0                      0          0                   1 ( 0.00%)          0               0             get_time(&init_start_time);
            .          .          .                      .                      .          .                   .                   .               .           
            2 ( 0.00%) 0          0                      0                      0          0                   1 ( 0.00%)          0               0             matrix_init_identity(A);
            2 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)             0                      0          0                   1 ( 0.00%)          0               0             matrix_init_random(B);
            .          .          .                      .                      .          .                   .                   .               .           
            3 ( 0.00%) 0          0                      0                      0          0                   1 ( 0.00%)          0               0             get_time(&init_end_time);
            .          .          .                      .                      .          .                   .                   .               .           
            .          .          .                      .                      .          .                   .                   .               .             /* Perform the matrix multiplication */
            .          .          .                      .                      .          .                   .                   .               .             struct timespec compute_start_time, compute_end_time;
            4 ( 0.00%) 0          0                      0                      0          0                   2 ( 0.00%)          0               0             get_time(&compute_start_time);
            .          .          .                      .                      .          .                   .                   .               .           
            .          .          .                      .                      .          .                   .                   .               .             for (int Z = 0; Z < N_REPEAT; ++Z)
            4 ( 0.00%) 0          0                      0                      0          0                   1 ( 0.00%)          0               0               matrix_multiply(C, A, B);
            .          .          .                      .                      .          .                   .                   .               .           
            3 ( 0.00%) 0          0                      0                      0          0                   1 ( 0.00%)          0               0             get_time(&compute_end_time);
            .          .          .                      .                      .          .                   .                   .               .           
            .          .          .                      .                      .          .                   .                   .               .           
            .          .          .                      .                      .          .                   .                   .               .           #ifdef ENABLE_TIMING
            .          .          .                      .                      .          .                   .                   .               .             /* Output result in CSV for easy processing */
            .          .          .                      .                      .          .                   .                   .               .             /* N,init time,n_repeat,runtime */
            7 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)             1 ( 0.00%)             0          0                   3 ( 0.00%)          0               0             printf("%d,%f,%d,%f\n",
            .          .          .                      .                      .          .                   .                   .               .                    N,
            .          .          .                      .                      .          .                   .                   .               .                    get_elapsed_ms(&init_end_time, &init_start_time),
            .          .          .                      .                      .          .                   .                   .               .                    N_REPEAT,
            .          .          .                      .                      .          .                   .                   .               .                    get_elapsed_ms(&compute_end_time, &compute_start_time));
            .          .          .                      .                      .          .                   .                   .               .           #endif /* ENABLE_TIMING */
            .          .          .                      .                      .          .                   .                   .               .           
            .          .          .                      .                      .          .                   .                   .               .           #if 0
            .          .          .                      .                      .          .                   .                   .               .             /* For debugging */
            .          .          .                      .                      .          .                   .                   .               .             if (!matrix_equal(C, B))
            .          .          .                      .                      .          .                   .                   .               .               fprintf(stderr, "Matrices are not equal!!\n");
            .          .          .                      .                      .          .                   .                   .               .           #endif
            .          .          .                      .                      .          .                   .                   .               .           
            2 ( 0.00%) 0          0                      0                      0          0                   1 ( 0.00%)          0               0             _mm_free(A);
            2 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)             0                      0          0                   1 ( 0.00%)          0               0             _mm_free(B);
            2 ( 0.00%) 0          0                      0                      0          0                   1 ( 0.00%)          0               0             _mm_free(C);
            .          .          .                      .                      .          .                   .                   .               .           
            .          .          .                      .                      .          .                   .                   .               .             return 0;
           12 ( 0.00%) 0          0                      9 ( 0.00%)             2 ( 0.00%) 0                   0                   0               0           }
--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
Ir                     I1mr        ILmr        Dr                     D1mr                   DLmr       Dw                  D1mw                DLmw             
--------------------------------------------------------------------------------
9,151,989,257 (99.27%) 11 ( 0.72%) 11 ( 0.73%) 2,181,039,193 (99.14%) 1,076,887,588 (100.0%) 1 ( 0.07%) 69,207,109 (86.83%) 34,145,249 (99.81%) 131,072 (66.47%)  events annotated

