--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         35651584 B, 64 B, 17-way associative
Command:          ./grayscale_yx test2048.png 10
Data file:        cachegrind.out.72880
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     I1mr           ILmr           Dr                   D1mr               DLmr           Dw                   D1mw               DLmw             
--------------------------------------------------------------------------------
3,554,878,284 (100.0%) 2,353 (100.0%) 2,306 (100.0%) 499,185,453 (100.0%) 3,812,945 (100.0%) 2,078 (100.0%) 134,453,910 (100.0%) 3,370,359 (100.0%) 523,926 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                     I1mr         ILmr         Dr                   D1mr               DLmr         Dw                  D1mw               DLmw              file:function
--------------------------------------------------------------------------------
2,307,072,110 (64.90%)   5 ( 0.21%)   5 ( 0.22%) 167,833,650 (33.62%) 2,621,451 (68.75%)   1 ( 0.05%) 83,886,090 (62.39%) 2,621,449 (77.78%) 262,144 (50.03%)  /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/grayscale.c:grayscale_yx
  587,202,560 (16.52%)   1 ( 0.04%)   1 ( 0.04%) 167,772,160 (33.61%)         0            0                   0                  0                0           /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/grayscale.c:compute_intensity
  578,480,251 (16.27%) 410 (17.42%) 396 (17.17%) 139,869,019 (28.02%) 1,006,622 (26.40%)  76 ( 3.66%) 43,817,891 (32.59%)   172,587 ( 5.12%)     206 ( 0.04%)  ???:???
   42,869,989 ( 1.21%)  27 ( 1.15%)  27 ( 1.17%)  15,781,434 ( 3.16%)         0            0           1,624,790 ( 1.21%)         2 ( 0.00%)       0           ???:adler32_z
   33,356,644 ( 0.94%) 100 ( 4.25%) 100 ( 4.34%)   6,074,200 ( 1.22%)    33,865 ( 0.89%)   5 ( 0.24%)  3,416,136 ( 2.54%)    13,097 ( 0.39%)      13 ( 0.00%)  ???:inflate
    4,966,650 ( 0.14%)  10 ( 0.42%)  10 ( 0.43%)   1,603,289 ( 0.32%)   129,625 ( 3.40%) 126 ( 6.06%)  1,574,167 ( 1.17%)   560,559 (16.63%) 260,610 (49.74%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms

--------------------------------------------------------------------------------
-- Auto-annotated source: /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/grayscale.c
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                   D1mr               DLmr       Dw                  D1mw               DLmw             

-- line 17 ----------------------------------------
            .          .          .                    .                  .          .                   .                  .                .            * It is #defined in the makefile.
            .          .          .                    .                  .          .                   .                  .                .            */
            .          .          .                    .                  .          .                   .                  .                .           #ifndef VARIANT
            .          .          .                    .                  .          .                   .                  .                .           #  define VARIANT grayscale_xy
            .          .          .                    .                  .          .                   .                  .                .           #endif
            .          .          .                    .                  .          .                   .                  .                .           
            .          .          .                    .                  .          .                   .                  .                .           static inline const char *
            .          .          .                    .                  .          .                   .                  .                .           get_basename(const char *str)
           20 ( 0.00%) 0          0                    0                  0          0                  10 ( 0.00%)         0                0           {
           20 ( 0.00%) 0          0                    0                  0          0                  10 ( 0.00%)         0                0             const char *end = strrchr(str, '/');
            .          .          .                    .                  .          .                   .                  .                .             if (!end)
            .          .          .                    .                  .          .                   .                  .                .               return str;
           40 ( 0.00%) 0          0                    0                  0          0                   0                  0                0             return end + 1;
           20 ( 0.00%) 0          0                   20 ( 0.00%)         0          0                   0                  0                0           }
            .          .          .                    .                  .          .                   .                  .                .           
            .          .          .                    .                  .          .                   .                  .                .           
            .          .          .                    .                  .          .                   .                  .                .           /* Computes the intensity of @color. To do so, we use CIE 1931 weights
            .          .          .                    .                  .          .                   .                  .                .            * multiplied by alpha: Y = A( 0.2126R + 0.7152G + 0.0722B ).
            .          .          .                    .                  .          .                   .                  .                .            */
            .          .          .                    .                  .          .                   .                  .                .           static float
            .          .          .                    .                  .          .                   .                  .                .           compute_intensity(rgba_t color)
   83,886,080 ( 2.36%) 1 ( 0.04%) 1 ( 0.04%)           0                  0          0                   0                  0                0           {
  461,373,440 (12.98%) 0          0          125,829,120 (25.21%)         0          0                   0                  0                0             return color.w * (0.2126f * color.x + 0.7152f * color.y + 0.0722f * color.z);
   41,943,040 ( 1.18%) 0          0           41,943,040 ( 8.40%)         0          0                   0                  0                0           }
            .          .          .                    .                  .          .                   .                  .                .           
            .          .          .                    .                  .          .                   .                  .                .           /* Computes the grayscale value for each pixel in @src and stores this in @dst.
            .          .          .                    .                  .          .                   .                  .                .            * @dst is expected to have been created already with the correct dimensions.
            .          .          .                    .                  .          .                   .                  .                .            * Safe to use an in-place operation.
            .          .          .                    .                  .          .                   .                  .                .            */
            .          .          .                    .                  .          .                   .                  .                .           void
            .          .          .                    .                  .          .                   .                  .                .           grayscale_xy(image_t *dst, const image_t *src)
            .          .          .                    .                  .          .                   .                  .                .           {
-- line 48 ----------------------------------------
-- line 56 ----------------------------------------
            .          .          .                    .                  .          .                   .                  .                .                     RGBA(gray, intensity, intensity, intensity, 1.f);
            .          .          .                    .                  .          .                   .                  .                .                     RGBA_pack(*image_get_pixel(dst, x, y), gray);
            .          .          .                    .                  .          .                   .                  .                .                   }
            .          .          .                    .                  .          .                   .                  .                .               }
            .          .          .                    .                  .          .                   .                  .                .           }
            .          .          .                    .                  .          .                   .                  .                .           
            .          .          .                    .                  .          .                   .                  .                .           void
            .          .          .                    .                  .          .                   .                  .                .           grayscale_yx(image_t *dst, const image_t *src)
           30 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)           0                  0          0                  10 ( 0.00%)         0                0           {
       81,940 ( 0.00%) 0          0               20,490 ( 0.00%)         0          0                   0                  0                0             for (int y = 0; y < dst->height; y++)
            .          .          .                    .                  .          .                   .                  .                .               {
  167,813,160 ( 4.72%) 1 ( 0.04%) 1 ( 0.04%)  41,943,060 ( 8.40%)         1 ( 0.00%) 1 ( 0.05%)          0                  0                0                 for (int x = 0; x < dst->width; x++)
            .          .          .                    .                  .          .                   .                  .                .                   {
            .          .          .                    .                  .          .                   .                  .                .                     rgba_t color, gray;
1,384,140,800 (38.94%) 2 ( 0.08%) 2 ( 0.09%)  83,906,560 (16.81%) 2,621,450 (68.75%) 0                   0                  0                0                     RGBA_unpack(color, *image_get_pixel(src, x, y));
  125,829,120 ( 3.54%) 0          0                    0                  0          0          41,943,040 (31.20%)         0                0                     float intensity = compute_intensity(color);
            .          .          .                    .                  .          .                   .                  .                .                     RGBA(gray, intensity, intensity, intensity, 1.f);
  629,207,040 (17.70%) 1 ( 0.04%) 1 ( 0.04%)  41,963,520 ( 8.41%)         0          0          41,943,040 (31.20%) 2,621,449 (77.78%) 262,144 (50.03%)            RGBA_pack(*image_get_pixel(dst, x, y), gray);
            .          .          .                    .                  .          .                   .                  .                .                   }
            .          .          .                    .                  .          .                   .                  .                .               }
           20 ( 0.00%) 0          0                   20 ( 0.00%)         0          0                   0                  0                0           }
            .          .          .                    .                  .          .                   .                  .                .           
            .          .          .                    .                  .          .                   .                  .                .           
            .          .          .                    .                  .          .                   .                  .                .           int
            .          .          .                    .                  .          .                   .                  .                .           main(int argc, char **argv)
           11 ( 0.00%) 2 ( 0.08%) 2 ( 0.09%)           1 ( 0.00%)         0          0                   7 ( 0.00%)         0                0           {
            2 ( 0.00%) 0          0                    0                  0          0                   0                  0                0             if (argc < 3)
            .          .          .                    .                  .          .                   .                  .                .               {
            .          .          .                    .                  .          .                   .                  .                .                 fprintf(stderr, "usage: %s <infile> <n_repeat> [outfile]\n", argv[0]);
            .          .          .                    .                  .          .                   .                  .                .                 fprintf(stderr, "\n  where <infile> and [outfile] are PNG files.");
            .          .          .                    .                  .          .                   .                  .                .                 fprintf(stderr, "\n  <n_repeat> is the number of times the computation should be repeated.");
            .          .          .                    .                  .          .                   .                  .                .                 fprintf(stderr, "\n  [outfile] is an optional parameter.\n");
            .          .          .                    .                  .          .                   .                  .                .                 return -1;
            .          .          .                    .                  .          .                   .                  .                .               }
            .          .          .                    .                  .          .                   .                  .                .           
            1 ( 0.00%) 0          0                    1 ( 0.00%)         0          0                   0                  0                0             const char *infile = argv[1];
            .          .          .                    .                  .          .                   .                  .                .             long int n_repeat = 0;
            2 ( 0.00%) 0          0                    1 ( 0.00%)         1 ( 0.00%) 0                   1 ( 0.00%)         0                0             const char *outfile = argv[3];
            .          .          .                    .                  .          .                   .                  .                .           
            6 ( 0.00%) 0          0                    1 ( 0.00%)         0          0                   2 ( 0.00%)         0                0             n_repeat = strtol(argv[2], NULL, 10);
            5 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)           1 ( 0.00%)         0          0                   1 ( 0.00%)         0                0             if (errno > 0 || n_repeat == 0)
            .          .          .                    .                  .          .                   .                  .                .               {
            .          .          .                    .                  .          .                   .                  .                .                 fprintf(stderr, "Could not convert n_repeat argument to integer.\n");
            .          .          .                    .                  .          .                   .                  .                .                 return EXIT_FAILURE;
            .          .          .                    .                  .          .                   .                  .                .               }
            .          .          .                    .                  .          .                   .                  .                .           
            .          .          .                    .                  .          .                   .                  .                .             /* Load PNG image */
            .          .          .                    .                  .          .                   .                  .                .             struct timespec load_start_time, load_end_time;
            3 ( 0.00%) 0          0                    0                  0          0                   1 ( 0.00%)         0                0             get_time(&load_start_time);
            .          .          .                    .                  .          .                   .                  .                .           
            3 ( 0.00%) 1 ( 0.04%) 0                    0                  0          0                   1 ( 0.00%)         0                0             image_t *image = image_new_from_pngfile(infile);
            2 ( 0.00%) 0          0                    0                  0          0                   0                  0                0             if (!image)
            .          .          .                    .                  .          .                   .                  .                .               return EXIT_FAILURE;
            .          .          .                    .                  .          .                   .                  .                .           
            4 ( 0.00%) 0          0                    0                  0          0                   2 ( 0.00%)         1 ( 0.00%)       0             get_time(&load_end_time);
            .          .          .                    .                  .          .                   .                  .                .           
            .          .          .                    .                  .          .                   .                  .                .           #if ENABLE_TIMING
            .          .          .                    .                  .          .                   .                  .                .             printf("filename,load time,grayscale time\n");
            .          .          .                    .                  .          .                   .                  .                .           #endif /* ENABLE_TIMING */
            .          .          .                    .                  .          .                   .                  .                .           
            .          .          .                    .                  .          .                   .                  .                .             /* Execute */
            3 ( 0.00%) 0          0                    0                  0          0                   1 ( 0.00%)         0                0             image_t *result = image_new_from_image(image);
            .          .          .                    .                  .          .                   .                  .                .           
           46 ( 0.00%) 0          0                   21 ( 0.00%)         0          0                   0                  0                0             for (long int Z = 0; Z < n_repeat; Z++)
            .          .          .                    .                  .          .                   .                  .                .               {
            .          .          .                    .                  .          .                   .                  .                .                 struct timespec start_time, end_time;
            .          .          .                    .                  .          .                   .                  .                .           
           30 ( 0.00%) 0          0                    0                  0          0                  20 ( 0.00%)         0                0                 get_time(&start_time);
            .          .          .                    .                  .          .                   .                  .                .           
           30 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)           0                  0          0                  10 ( 0.00%)         0                0                 VARIANT(result, image);
            .          .          .                    .                  .          .                   .                  .                .           
           20 ( 0.00%) 0          0                    0                  0          0                  10 ( 0.00%)         0                0                 get_time(&end_time);
            .          .          .                    .                  .          .                   .                  .                .           
            .          .          .                    .                  .          .                   .                  .                .           #if ENABLE_TIMING
            .          .          .                    .                  .          .                   .                  .                .                 /* Output result in CSV for easy processing */
            .          .          .                    .                  .          .                   .                  .                .                 /* filename,load time,compute time */
          110 ( 0.00%) 0          0                   10 ( 0.00%)         0          0                  50 ( 0.00%)         0                0                 printf("%s,%f,%f\n",
            .          .          .                    .                  .          .                   .                  .                .                        get_basename(infile),
            .          .          .                    .                  .          .                   .                  .                .                        get_elapsed_ms(&load_end_time, &load_start_time),
            .          .          .                    .                  .          .                   .                  .                .                        get_elapsed_ms(&end_time, &start_time));
            .          .          .                    .                  .          .                   .                  .                .           #endif /* ENABLE_TIMING */
            .          .          .                    .                  .          .                   .                  .                .               }
            .          .          .                    .                  .          .                   .                  .                .           
            .          .          .                    .                  .          .                   .                  .                .             /* Save result if desired and if applicable */
            2 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)           0                  0          0                   0                  0                0             int retval = EXIT_SUCCESS;
            5 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)           1 ( 0.00%)         0          0                   0                  0                0             if (outfile && result && !image_save_as_pngfile(result, outfile))
            .          .          .                    .                  .          .                   .                  .                .               retval = EXIT_FAILURE;
            .          .          .                    .                  .          .                   .                  .                .           
            3 ( 0.00%) 0          0                    0                  0          0                   2 ( 0.00%)         0                0             image_free(image);
            2 ( 0.00%) 0          0                    0                  0          0                   1 ( 0.00%)         0                0             image_free(result);
            .          .          .                    .                  .          .                   .                  .                .           
            2 ( 0.00%) 0          0                    1 ( 0.00%)         0          0                   0                  0                0             return retval;
           11 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)           9 ( 0.00%)         1 ( 0.00%) 0                   0                  0                0           }

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                     I1mr        ILmr        Dr                   D1mr               DLmr       Dw                  D1mw               DLmw             
--------------------------------------------------------------------------------
2,894,275,073 (81.42%) 14 ( 0.59%) 13 ( 0.56%) 335,605,877 (67.23%) 2,621,453 (68.75%) 1 ( 0.05%) 83,886,219 (62.39%) 2,621,450 (77.78%) 262,144 (50.03%)  events annotated

