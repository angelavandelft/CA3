--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         35651584 B, 64 B, 17-way associative
Command:          ./tilecomposite color4096.png bricks512.png 1 out3.png
Data file:        cachegrind.out.2624058
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      I1mr           ILmr           Dr                     D1mr                   DLmr               Dw                     D1mw                DLmw               
--------------------------------------------------------------------------------
41,282,227,913 (100.0%) 3,083 (100.0%) 2,960 (100.0%) 8,892,490,524 (100.0%) 1,052,989,960 (100.0%) 1,072,073 (100.0%) 2,190,275,704 (100.0%) 15,145,498 (100.0%) 1,070,701 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      I1mr         ILmr         Dr                     D1mr                   DLmr             Dw                     D1mw               DLmw                file:function
--------------------------------------------------------------------------------
34,100,781,777 (82.60%) 704 (22.83%) 655 (22.13%) 7,558,720,169 (85.00%) 1,042,625,476 (99.02%)     157 ( 0.01%) 1,514,307,428 (69.14%) 5,229,299 (34.53%)     2,234 ( 0.21%)  ???:???
 6,195,483,014 (15.01%)  52 ( 1.69%)  52 ( 1.76%)   824,380,626 ( 9.27%)     5,332,365 ( 0.51%)       0            307,839,689 (14.05%) 3,742,273 (24.71%)        99 ( 0.01%)  ???:png_write_row
   403,070,675 ( 0.98%)  43 ( 1.39%)  38 ( 1.28%)   148,061,796 ( 1.67%)         7,400 ( 0.00%)       0             15,065,579 ( 0.69%)    13,155 ( 0.09%)         0           ???:adler32_z
   352,184,487 ( 0.85%)  21 ( 0.68%)  19 ( 0.64%)   343,587,746 ( 3.86%)     4,194,183 ( 0.40%) 984,652 (91.85%)   343,417,130 (15.68%) 6,100,656 (40.28%) 1,066,432 (99.60%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
   160,769,785 ( 0.39%)  12 ( 0.39%)  12 ( 0.41%)     4,657,241 ( 0.05%)       655,113 ( 0.06%)  85,173 ( 7.94%)     2,131,511 ( 0.10%)         0                  0           /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/tilecomposite.c:op_tile_composite
    64,942,425 ( 0.16%) 113 ( 3.67%) 103 ( 3.48%)    11,826,304 ( 0.13%)        70,006 ( 0.01%)       5 ( 0.00%)     6,743,270 ( 0.31%)    38,600 ( 0.25%)        13 ( 0.00%)  ???:inflate

--------------------------------------------------------------------------------
-- Auto-annotated source: /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/tilecomposite.c
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr                 D1mr             DLmr            Dw                 D1mw       DLmw       

-- line 13 ----------------------------------------
         .          .          .                  .                .               .                  .          .          .           #include <stdio.h>
         .          .          .                  .                .               .                  .          .          .           #include <stdlib.h>
         .          .          .                  .                .               .                  .          .          .           #include <string.h>
         .          .          .                  .                .               .                  .          .          .           #include <errno.h>
         .          .          .                  .                .               .                  .          .          .           #include <assert.h>
         .          .          .                  .                .               .                  .          .          .           
         .          .          .                  .                .               .                  .          .          .           static inline const char *
         .          .          .                  .                .               .                  .          .          .           get_basename(const char *str)
         4 ( 0.00%) 0          0                  0                0               0                  2 ( 0.00%) 0          0           {
         4 ( 0.00%) 0          0                  0                0               0                  2 ( 0.00%) 0          0             const char *end = strrchr(str, '/');
         .          .          .                  .                .               .                  .          .          .             if (!end)
         .          .          .                  .                .               .                  .          .          .               return str;
         8 ( 0.00%) 0          0                  0                0               0                  0          0          0             return end + 1;
         4 ( 0.00%) 0          0                  4 ( 0.00%)       0               0                  0          0          0           }
         .          .          .                  .                .               .                  .          .          .           
         .          .          .                  .                .               .                  .          .          .           // /* Tiles the @tile image over a diagonal on @background using alpha blending.
         .          .          .                  .                .               .                  .          .          .           //  * For the tile an alpha value of @tile_alpha is used.
         .          .          .                  .                .               .                  .          .          .           //  */
         .          .          .                  .                .               .                  .          .          .           // void
         .          .          .                  .                .               .                  .          .          .           // op_tile_composite(image_t * const background,
         .          .          .                  .                .               .                  .          .          .           //                   const image_t * const tile, const float tile_alpha)
         .          .          .                  .                .               .                  .          .          .           // {
-- line 34 ----------------------------------------
-- line 86 ----------------------------------------
         .          .          .                  .                .               .                  .          .          .           // }
         .          .          .                  .                .               .                  .          .          .           
         .          .          .                  .                .               .                  .          .          .           /* Tiles the @tile image over a diagonal on @background using alpha blending.
         .          .          .                  .                .               .                  .          .          .            * For the tile an alpha value of @tile_alpha is used.
         .          .          .                  .                .               .                  .          .          .            */
         .          .          .                  .                .               .                  .          .          .           void
         .          .          .                  .                .               .                  .          .          .           op_tile_composite(image_t * const background,
         .          .          .                  .                .               .                  .          .          .                             const image_t * const tile, const float tile_alpha)
         9 ( 0.00%) 1 ( 0.03%) 1 ( 0.03%)         0                0               0                  6 ( 0.00%) 0          0           {
         .          .          .                  .                .               .                  .          .          .             int const BLOCK_Y = 8, BLOCK_X = 8;
         .          .          .                  .                .               .                  .          .          .           
         6 ( 0.00%) 0          0                  2 ( 0.00%)       0               0                  1 ( 0.00%) 0          0             const int d_height = MIN(background->width, background->height);
         .          .          .                  .                .               .                  .          .          .           
         2 ( 0.00%) 0          0                  2 ( 0.00%)       0               0                  0          0          0             int const t_height = tile->height, t_width = tile->width;
         2 ( 0.00%) 0          0                  2 ( 0.00%)       0               0                  0          0          0             int const t_rowstride = tile->rowstride, b_rowstride = background->rowstride;
         3 ( 0.00%) 1 ( 0.03%) 1 ( 0.03%)         2 ( 0.00%)       0               0                  1 ( 0.00%) 0          0             uint32_t * t_data = tile->data, * b_data = background->data;
         .          .          .                  .                .               .                  .          .          .           
        58 ( 0.00%) 0          0                 48 ( 0.00%)       0               0                  0          0          0             for (int d = 0; d < d_height; d += t_height)
     3,704 ( 0.00%) 1 ( 0.03%) 1 ( 0.03%)     2,064 ( 0.00%)     256 ( 0.00%)      0                544 ( 0.00%) 0          0               for (int yy = d; yy < d + t_height; yy += BLOCK_Y)
   197,120 ( 0.00%) 0          0             66,048 ( 0.00%)       0               0             32,768 ( 0.00%) 0          0                 for (int xx = d; xx < d + t_width; xx += BLOCK_X)
 1,086,976 ( 0.00%) 2 ( 0.06%) 2 ( 0.07%)    34,304 ( 0.00%)       0               0              1,024 ( 0.00%) 0          0                   for (int y = yy; y < MIN(yy + BLOCK_Y, d + t_height); y++)
 6,553,600 ( 0.02%) 0          0             98,304 ( 0.00%)       0               0                  0          0          0                     for (int x = xx; x < MIN(xx + BLOCK_X, d + t_width); x++) {
 6,291,456 ( 0.02%) 0          0                  0                0               0                  0          0          0                       int tx = x % t_width;
   786,432 ( 0.00%) 1 ( 0.03%) 1 ( 0.03%)         0                0               0                  0          0          0                       int ty = y % t_height;
         .          .          .                  .                .               .                  .          .          .                   
         3 ( 0.00%) 0          0                  0                0               0                  0          0          0                       uint32_t * const b_pixel = image_get_pixel_data(b_data, b_rowstride, x, y);
 4,980,775 ( 0.01%) 2 ( 0.06%) 2 ( 0.07%)   262,154 ( 0.00%)       0               0                 15 ( 0.00%) 0          0                       uint32_t * const t_pixel = image_get_pixel_data(t_data, t_rowstride, tx, ty);
         .          .          .                  .                .               .                  .          .          .                       rgba_t dst, src;
41,943,040 ( 0.10%) 2 ( 0.06%) 2 ( 0.07%) 2,097,152 ( 0.02%) 393,216 ( 0.04%) 68,788 ( 6.42%)         0          0          0                       RGBA_unpack(dst, *b_pixel);
41,943,040 ( 0.10%) 1 ( 0.03%) 1 ( 0.03%) 2,097,152 ( 0.02%) 261,640 ( 0.02%) 16,385 ( 1.53%)         0          0          0                       RGBA_unpack(src, *t_pixel);
 8,388,608 ( 0.02%) 0          0                  0                0               0                  0          0          0                       RGBA_mults(src, src, tile_alpha);
 8,749,056 ( 0.02%) 0          0                  0                0               0                  0          0          0                       RGBA_mults(dst, dst, 1.f - tile_alpha);
 8,388,608 ( 0.02%) 0          0                  0                0               0                  0          0          0                       RGBA_add(dst, dst, src);
31,457,280 ( 0.08%) 1 ( 0.03%) 1 ( 0.03%)         0                0               0          2,097,152 ( 0.10%) 0          0                       RGBA_pack(*b_pixel, dst);
         .          .          .                  .                .               .                  .          .          .                   }
         7 ( 0.00%) 0          0                  7 ( 0.00%)       1 ( 0.00%)      0                  0          0          0           }
         .          .          .                  .                .               .                  .          .          .           
         .          .          .                  .                .               .                  .          .          .           
         .          .          .                  .                .               .                  .          .          .           
         .          .          .                  .                .               .                  .          .          .           
         .          .          .                  .                .               .                  .          .          .           int
         .          .          .                  .                .               .                  .          .          .           main(int argc, char **argv)
        11 ( 0.00%) 2 ( 0.06%) 2 ( 0.07%)         1 ( 0.00%)       0               0                  7 ( 0.00%) 0          0           {
         2 ( 0.00%) 0          0                  0                0               0                  0          0          0             if (argc < 4)
         .          .          .                  .                .               .                  .          .          .               {
         .          .          .                  .                .               .                  .          .          .                 fprintf(stderr, "usage: %s <infile> <tilefile> <n_repeat> [outfile]\n", argv[0]);
         .          .          .                  .                .               .                  .          .          .                 fprintf(stderr, "\n  where <infile>, <tilefile> and [outfile] are PNG files.");
         .          .          .                  .                .               .                  .          .          .                 fprintf(stderr, "\n  <n_repeat> is the number of times the computation should be repeated.");
         .          .          .                  .                .               .                  .          .          .                 fprintf(stderr, "\n  [outfile] is an optional parameter.\n");
         .          .          .                  .                .               .                  .          .          .                 return EXIT_FAILURE;
         .          .          .                  .                .               .                  .          .          .               }
         .          .          .                  .                .               .                  .          .          .           
         1 ( 0.00%) 0          0                  1 ( 0.00%)       0               0                  0          0          0             const char *infile = argv[1];
         1 ( 0.00%) 0          0                  1 ( 0.00%)       0               0                  0          0          0             const char *tilefile = argv[2];
         .          .          .                  .                .               .                  .          .          .             long int n_repeat = 0;
         2 ( 0.00%) 0          0                  1 ( 0.00%)       1 ( 0.00%)      0                  1 ( 0.00%) 0          0             const char *outfile = argv[4];
         .          .          .                  .                .               .                  .          .          .           
         6 ( 0.00%) 0          0                  1 ( 0.00%)       0               0                  2 ( 0.00%) 0          0             n_repeat = strtol(argv[3], NULL, 10);
         5 ( 0.00%) 1 ( 0.03%) 1 ( 0.03%)         1 ( 0.00%)       0               0                  1 ( 0.00%) 0          0             if (errno > 0 || n_repeat == 0)
         .          .          .                  .                .               .                  .          .          .               {
         .          .          .                  .                .               .                  .          .          .                 fprintf(stderr, "Could not convert n_repeat argument to integer.\n");
         .          .          .                  .                .               .                  .          .          .                 return EXIT_FAILURE;
         .          .          .                  .                .               .                  .          .          .               }
         .          .          .                  .                .               .                  .          .          .           
         .          .          .                  .                .               .                  .          .          .             /* Load PNG images */
         .          .          .                  .                .               .                  .          .          .             struct timespec load_start_time, load_end_time;
         3 ( 0.00%) 0          0                  0                0               0                  2 ( 0.00%) 0          0             get_time(&load_start_time);
         .          .          .                  .                .               .                  .          .          .           
         .          .          .                  .                .               .                  .          .          .             /* Load tile first on purpose, to ensure it is evicted from the caches
         .          .          .                  .                .               .                  .          .          .              * by the load of the background. Do not change this!
         .          .          .                  .                .               .                  .          .          .              */
         3 ( 0.00%) 1 ( 0.03%) 0                  0                0               0                  1 ( 0.00%) 0          0             image_t *tile = image_new_from_pngfile(tilefile);
         2 ( 0.00%) 0          0                  0                0               0                  0          0          0             if (!tile)
         .          .          .                  .                .               .                  .          .          .               return EXIT_FAILURE;
         .          .          .                  .                .               .                  .          .          .           
         3 ( 0.00%) 0          0                  0                0               0                  1 ( 0.00%) 0          0             image_t *background = image_new_from_pngfile(infile);
         2 ( 0.00%) 1 ( 0.03%) 1 ( 0.03%)         0                0               0                  0          0          0             if (!background)
         .          .          .                  .                .               .                  .          .          .               return EXIT_FAILURE;
         .          .          .                  .                .               .                  .          .          .           
         4 ( 0.00%) 0          0                  0                0               0                  2 ( 0.00%) 1 ( 0.00%) 1 ( 0.00%)    get_time(&load_end_time);
         .          .          .                  .                .               .                  .          .          .           
         .          .          .                  .                .               .                  .          .          .           #if ENABLE_TIMING
         .          .          .                  .                .               .                  .          .          .             printf("filename,tile filename,load time,tilecomposite time\n");
         .          .          .                  .                .               .                  .          .          .           #endif /* ENABLE_TIMING */
         .          .          .                  .                .               .                  .          .          .           
         .          .          .                  .                .               .                  .          .          .             /* Execute */
        11 ( 0.00%) 1 ( 0.03%) 1 ( 0.03%)         2 ( 0.00%)       0               0                  1 ( 0.00%) 0          0             for (long int Z = 0; Z < n_repeat; Z++)
         .          .          .                  .                .               .                  .          .          .               {
         .          .          .                  .                .               .                  .          .          .                 struct timespec start_time, end_time;
         .          .          .                  .                .               .                  .          .          .           
         2 ( 0.00%) 0          0                  0                0               0                  1 ( 0.00%) 0          0                 get_time(&start_time);
         .          .          .                  .                .               .                  .          .          .           
         4 ( 0.00%) 0          0                  1 ( 0.00%)       0               0                  1 ( 0.00%) 0          0                 op_tile_composite(background, tile, 0.2f);
         .          .          .                  .                .               .                  .          .          .           
         2 ( 0.00%) 0          0                  0                0               0                  1 ( 0.00%) 0          0                 get_time(&end_time);
         .          .          .                  .                .               .                  .          .          .           
         .          .          .                  .                .               .                  .          .          .           #if ENABLE_TIMING
         .          .          .                  .                .               .                  .          .          .                 /* Output result in CSV for easy processing */
         .          .          .                  .                .               .                  .          .          .                 /* filename,tile filename,load time,compute time */
        14 ( 0.00%) 1 ( 0.03%) 1 ( 0.03%)         3 ( 0.00%)       1 ( 0.00%)      0                  7 ( 0.00%) 0          0                 printf("%s,%s,%f,%f\n",
         .          .          .                  .                .               .                  .          .          .                        get_basename(infile), get_basename(tilefile),
         .          .          .                  .                .               .                  .          .          .                        get_elapsed_ms(&load_end_time, &load_start_time),
         .          .          .                  .                .               .                  .          .          .                        get_elapsed_ms(&end_time, &start_time));
         .          .          .                  .                .               .                  .          .          .           #endif /* ENABLE_TIMING */
         .          .          .                  .                .               .                  .          .          .               }
         .          .          .                  .                .               .                  .          .          .           
         .          .          .                  .                .               .                  .          .          .             /* Save result if desired and if applicable */
         3 ( 0.00%) 0          0                  0                0               0                  0          0          0             int retval = EXIT_SUCCESS;
         6 ( 0.00%) 2 ( 0.06%) 2 ( 0.07%)         2 ( 0.00%)       0               0                  1 ( 0.00%) 0          0             if (outfile && background && !image_save_as_pngfile(background, outfile))
         .          .          .                  .                .               .                  .          .          .               retval = EXIT_FAILURE;
         .          .          .                  .                .               .                  .          .          .           
         3 ( 0.00%) 1 ( 0.03%) 1 ( 0.03%)         0                0               0                  2 ( 0.00%) 0          0             image_free(background);
         3 ( 0.00%) 1 ( 0.03%) 1 ( 0.03%)         1 ( 0.00%)       0               0                  1 ( 0.00%) 0          0             image_free(tile);
         .          .          .                  .                .               .                  .          .          .           
         1 ( 0.00%) 0          0                  0                0               0                  0          0          0             return retval;
        11 ( 0.00%) 1 ( 0.03%) 1 ( 0.03%)         9 ( 0.00%)       2 ( 0.00%)      2 ( 0.00%)         0          0          0           }
--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                   I1mr        ILmr        Dr                 D1mr             DLmr            Dw                 D1mw       DLmw       
--------------------------------------------------------------------------------
160,769,910 ( 0.39%) 24 ( 0.78%) 23 ( 0.78%) 4,657,269 ( 0.05%) 655,117 ( 0.06%) 85,175 ( 7.94%) 2,131,547 ( 0.10%) 1 ( 0.00%) 1 ( 0.00%)  events annotated

