--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         35651584 B, 64 B, 17-way associative
Command:          ./matrixmul-1-1024
Data file:        cachegrind.out.1243555
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     I1mr           ILmr           Dr                     D1mr                   DLmr           Dw                  D1mw               DLmw             
--------------------------------------------------------------------------------
7,608,511,053 (100.0%) 1,523 (100.0%) 1,508 (100.0%) 2,166,396,171 (100.0%) 1,074,921,162 (100.0%) 1,370 (100.0%) 13,647,163 (100.0%) 1,181,336 (100.0%) 197,204 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                     I1mr        ILmr        Dr                     D1mr                   DLmr         Dw                 D1mw               DLmw             file:function
--------------------------------------------------------------------------------
7,525,636,105 (98.91%)  2 ( 0.13%)  2 ( 0.13%) 2,147,483,650 (99.13%) 1,074,919,425 (100.0%)   0          1,048,577 ( 7.68%) 1,048,576 (88.76%) 65,536 (33.23%)  /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c:matrix_multiply
   33,419,132 ( 0.44%)  2 ( 0.13%)  2 ( 0.13%)     8,388,608 ( 0.39%)             4 ( 0.00%)   2 ( 0.15%) 3,145,728 (23.05%)         0               0           ./stdlib/./stdlib/random_r.c:random_r
   22,020,096 ( 0.29%)  3 ( 0.20%)  3 ( 0.20%)     8,388,608 ( 0.39%)             2 ( 0.00%)   1 ( 0.07%) 2,097,152 (15.37%)         0               0           ./stdlib/./stdlib/random.c:random
   15,733,770 ( 0.21%)  1 ( 0.07%)  1 ( 0.07%)             4 ( 0.00%)             0            0          2,097,155 (15.37%)    65,536 ( 5.55%) 65,536 (33.23%)  /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c:matrix_init_random

--------------------------------------------------------------------------------
-- Auto-annotated source: /vol/home/s3801322/Documents/CA/lab3materials-2024/lab3materials/matrixmul.c
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr                   DLmr       Dw                 D1mw               DLmw            

-- line 36 ----------------------------------------
            .          .          .                      .                      .          .                  .                  .               .             return (a < b) ? a : b;
            .          .          .                      .                      .          .                  .                  .               .           }
            .          .          .                      .                      .          .                  .                  .               .           
            .          .          .                      .                      .          .                  .                  .               .           static void
            .          .          .                      .                      .          .                  .                  .               .           matrix_clear(float matrix[N][N])
            .          .          .                      .                      .          .                  .                  .               .           {
            .          .          .                      .                      .          .                  .                  .               .             for (size_t i = 0; i < N; ++i)
            .          .          .                      .                      .          .                  .                  .               .               for (size_t j = 0; j < N; ++j)
            3 ( 0.00%) 0          0                      0                      0          0                  0                  0               0                 matrix[i][j] = 0;
            .          .          .                      .                      .          .                  .                  .               .           }
            .          .          .                      .                      .          .                  .                  .               .           
            .          .          .                      .                      .          .                  .                  .               .           static void
            .          .          .                      .                      .          .                  .                  .               .           matrix_init_identity(float matrix[N][N])
            2 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)             0                      0          0                  1 ( 0.00%)         0               0           {
            1 ( 0.00%) 0          0                      0                      0          0                  1 ( 0.00%)         0               0             matrix_clear(matrix);
            .          .          .                      .                      .          .                  .                  .               .           
        3,076 ( 0.00%) 0          0                      1 ( 0.00%)             1 ( 0.00%) 1 ( 0.07%)         0                  0               0             for (size_t i = 0; i < N; ++i)
        1,024 ( 0.00%) 0          0                      0                      0          0              1,024 ( 0.01%)     1,024 ( 0.09%)      0               matrix[i][i] = 1.;
            2 ( 0.00%) 0          0                      2 ( 0.00%)             1 ( 0.00%) 0                  0                  0               0           }
            .          .          .                      .                      .          .                  .                  .               .           
            .          .          .                      .                      .          .                  .                  .               .           static void
            .          .          .                      .                      .          .                  .                  .               .           matrix_init_random(float matrix[N][N])
            6 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)             0                      0          0                  3 ( 0.00%)         0               0           {
        3,072 ( 0.00%) 0          0                      0                      0          0                  0                  0               0             for (size_t i = 0; i < N; ++i)
    3,147,776 ( 0.04%) 0          0                      0                      0          0                  0                  0               0               for (size_t j = 0; j < N; ++j)
   12,582,912 ( 0.17%) 0          0                      0                      0          0          2,097,152 (15.37%)    65,536 ( 5.55%) 65,536 (33.23%)        matrix[i][j] = rand() % 100;
            4 ( 0.00%) 0          0                      4 ( 0.00%)             0          0                  0                  0               0           }
            .          .          .                      .                      .          .                  .                  .               .           
            .          .          .                      .                      .          .                  .                  .               .           void
            .          .          .                      .                      .          .                  .                  .               .           matrix_dump(float matrix[N][N])
            .          .          .                      .                      .          .                  .                  .               .           {
            .          .          .                      .                      .          .                  .                  .               .             for (size_t i = 0; i < N; ++i)
            .          .          .                      .                      .          .                  .                  .               .               {
            .          .          .                      .                      .          .                  .                  .               .                 for (size_t j = 0; j < N; ++j)
            .          .          .                      .                      .          .                  .                  .               .                   printf("%f ", matrix[i][j]);
-- line 70 ----------------------------------------
-- line 82 ----------------------------------------
            .          .          .                      .                      .          .                  .                  .               .           
            .          .          .                      .                      .          .                  .                  .               .             return true;
            .          .          .                      .                      .          .                  .                  .               .           }
            .          .          .                      .                      .          .                  .                  .               .           
            .          .          .                      .                      .          .                  .                  .               .           #if BLOCK==0
            .          .          .                      .                      .          .                  .                  .               .           // non-blocked multiply
            .          .          .                      .                      .          .                  .                  .               .           static void
            .          .          .                      .                      .          .                  .                  .               .           matrix_multiply(float C[N][N], const float A[N][N], const float B[N][N])
            3 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)             0                      0          0                  1 ( 0.00%)         0               0           {
        3,072 ( 0.00%) 0          0                      0                      0          0                  0                  0               0             for (size_t i = 0; i < N; ++i)
    4,197,376 ( 0.06%) 0          0                      0                      0          0                  0                  0               0               for (size_t j = 0; j < N; ++j)
            .          .          .                      .                      .          .                  .                  .               .                 {
    2,097,156 ( 0.03%) 0          0                      0                      0          0                  0                  0               0                   float row = 0.0;
4,297,064,448 (56.48%) 1 ( 0.07%) 1 ( 0.07%)             0                      0          0                  0                  0               0                   for (size_t k = 0; k < N; k++)
3,221,225,472 (42.34%) 0          0          2,147,483,648 (99.13%) 1,074,919,424 (100.0%) 0                  0                  0               0                     row += A[i][k] * B[k][j];
    1,048,576 ( 0.01%) 0          0                      0                      0          0          1,048,576 ( 7.68%) 1,048,576 (88.76%) 65,536 (33.23%)          C[i][j] = row;
            .          .          .                      .                      .          .                  .                  .               .                 }
            2 ( 0.00%) 0          0                      2 ( 0.00%)             1 ( 0.00%) 0                  0                  0               0           }
            .          .          .                      .                      .          .                  .                  .               .           
            .          .          .                      .                      .          .                  .                  .               .           #else
            .          .          .                      .                      .          .                  .                  .               .           // blocked multiply
            .          .          .                      .                      .          .                  .                  .               .           static void
            .          .          .                      .                      .          .                  .                  .               .           matrix_multiply(float C[N][N], const float A[N][N], const float B[N][N])
            .          .          .                      .                      .          .                  .                  .               .           {
            .          .          .                      .                      .          .                  .                  .               .             for (size_t jj = 0; jj < N; jj += BLOCK) {
            .          .          .                      .                      .          .                  .                  .               .               for (size_t kk = 0; kk < N; kk += BLOCK) {
-- line 107 ----------------------------------------
-- line 117 ----------------------------------------
            .          .          .                      .                      .          .                  .                  .               .               }
            .          .          .                      .                      .          .                  .                  .               .             }
            .          .          .                      .                      .          .                  .                  .               .           }
            .          .          .                      .                      .          .                  .                  .               .           
            .          .          .                      .                      .          .                  .                  .               .           #endif
            .          .          .                      .                      .          .                  .                  .               .           
            .          .          .                      .                      .          .                  .                  .               .           int
            .          .          .                      .                      .          .                  .                  .               .           main(int argc, char **argv)
           11 ( 0.00%) 2 ( 0.13%) 2 ( 0.13%)             1 ( 0.00%)             0          0                  7 ( 0.00%)         0               0           {
            .          .          .                      .                      .          .                  .                  .               .             /* We use this "magic" to allocate real two-dimensional arrays, that
            .          .          .                      .                      .          .                  .                  .               .              * are aligned at 64-bytes (cache line size).
            .          .          .                      .                      .          .                  .                  .               .              */
            2 ( 0.00%) 0          0                      0                      0          0                  1 ( 0.00%)         0               0             float (*A)[N] = (float (*)[N])_mm_malloc(N * N * sizeof(float), 64);
            2 ( 0.00%) 0          0                      0                      0          0                  1 ( 0.00%)         0               0             float (*B)[N] = (float (*)[N])_mm_malloc(N * N * sizeof(float), 64);
            2 ( 0.00%) 0          0                      0                      0          0                  1 ( 0.00%)         0               0             float (*C)[N] = (float (*)[N])_mm_malloc(N * N * sizeof(float), 64);
            .          .          .                      .                      .          .                  .                  .               .           
            .          .          .                      .                      .          .                  .                  .               .             struct timespec init_start_time, init_end_time;
            3 ( 0.00%) 0          0                      0                      0          0                  1 ( 0.00%)         0               0             get_time(&init_start_time);
            .          .          .                      .                      .          .                  .                  .               .           
            2 ( 0.00%) 0          0                      0                      0          0                  1 ( 0.00%)         0               0             matrix_init_identity(A);
            2 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)             0                      0          0                  1 ( 0.00%)         0               0             matrix_init_random(B);
            .          .          .                      .                      .          .                  .                  .               .           
            3 ( 0.00%) 0          0                      0                      0          0                  1 ( 0.00%)         0               0             get_time(&init_end_time);
            .          .          .                      .                      .          .                  .                  .               .           
            .          .          .                      .                      .          .                  .                  .               .             /* Perform the matrix multiplication */
            .          .          .                      .                      .          .                  .                  .               .             struct timespec compute_start_time, compute_end_time;
            4 ( 0.00%) 0          0                      0                      0          0                  2 ( 0.00%)         0               0             get_time(&compute_start_time);
            .          .          .                      .                      .          .                  .                  .               .           
            .          .          .                      .                      .          .                  .                  .               .             for (int Z = 0; Z < N_REPEAT; ++Z)
            4 ( 0.00%) 0          0                      0                      0          0                  1 ( 0.00%)         0               0               matrix_multiply(C, A, B);
            .          .          .                      .                      .          .                  .                  .               .           
            3 ( 0.00%) 0          0                      0                      0          0                  1 ( 0.00%)         0               0             get_time(&compute_end_time);
            .          .          .                      .                      .          .                  .                  .               .           
            .          .          .                      .                      .          .                  .                  .               .           
            .          .          .                      .                      .          .                  .                  .               .           #ifdef ENABLE_TIMING
            .          .          .                      .                      .          .                  .                  .               .             /* Output result in CSV for easy processing */
            .          .          .                      .                      .          .                  .                  .               .             /* N,init time,n_repeat,runtime */
            7 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)             1 ( 0.00%)             0          0                  3 ( 0.00%)         0               0             printf("%d,%f,%d,%f\n",
            .          .          .                      .                      .          .                  .                  .               .                    N,
            .          .          .                      .                      .          .                  .                  .               .                    get_elapsed_ms(&init_end_time, &init_start_time),
            .          .          .                      .                      .          .                  .                  .               .                    N_REPEAT,
            .          .          .                      .                      .          .                  .                  .               .                    get_elapsed_ms(&compute_end_time, &compute_start_time));
            .          .          .                      .                      .          .                  .                  .               .           #endif /* ENABLE_TIMING */
            .          .          .                      .                      .          .                  .                  .               .           
            .          .          .                      .                      .          .                  .                  .               .           #if 0
            .          .          .                      .                      .          .                  .                  .               .             /* For debugging */
            .          .          .                      .                      .          .                  .                  .               .             if (!matrix_equal(C, B))
            .          .          .                      .                      .          .                  .                  .               .               fprintf(stderr, "Matrices are not equal!!\n");
            .          .          .                      .                      .          .                  .                  .               .           #endif
            .          .          .                      .                      .          .                  .                  .               .           
            2 ( 0.00%) 0          0                      0                      0          0                  1 ( 0.00%)         0               0             _mm_free(A);
            2 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)             0                      0          0                  1 ( 0.00%)         0               0             _mm_free(B);
            2 ( 0.00%) 0          0                      0                      0          0                  1 ( 0.00%)         0               0             _mm_free(C);
            .          .          .                      .                      .          .                  .                  .               .           
            .          .          .                      .                      .          .                  .                  .               .             return 0;
           12 ( 0.00%) 0          0                      9 ( 0.00%)             2 ( 0.00%) 0                  0                  0               0           }
--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c

--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr                   DLmr       Dw                 D1mw               DLmw             
--------------------------------------------------------------------------------
7,541,374,046 (99.12%) 9 ( 0.59%) 9 ( 0.60%) 2,147,483,668 (99.13%) 1,074,919,429 (100.0%) 1 ( 0.07%) 3,146,782 (23.06%) 1,115,136 (94.40%) 131,072 (66.47%)  events annotated

